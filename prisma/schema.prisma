generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              BigInt            @id // Telegram ID
  tag             String? // Telegram tag
  name            String // Telegram username
  musicSubmission MusicSubmission[]
  guesses         Guess[]
  roles           UserRole[]
}

model Role {
  id          Int        @id @default(autoincrement())
  name        String
  permissions Int        @default(0)
  chatId      BigInt // Added chat ID for chat-specific roles
  userRoles   UserRole[]

  @@unique([name, chatId])
}

model UserRole {
  userId BigInt
  roleId Int

  user User @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
}

model MusicSubmission {
  id                 Int         @id @default(autoincrement())
  fileId             String
  // TODO: use BitInt instead of Int
  mediaHintChatId    BigInt? // Telegram chat ID which the hint was sent
  mediaHintMessageId BigInt? // Message ID of the hint
  user               User        @relation(fields: [userId], references: [id])
  userId             BigInt
  rounds             GameRound[]
  gameId             Int? // New field to link submission to a specific game
  game               Game?       @relation(fields: [gameId], references: [id]) // New relation

  @@unique([userId, gameId])
}

enum GameStatus {
  ACTIVE
  FINISHED
}

model Game {
  id              Int               @id @default(autoincrement())
  createdAt       DateTime          @default(now())
  status          GameStatus        @default(ACTIVE)
  currentRound    Int               @default(0)
  rounds          GameRound[]
  MusicSubmission MusicSubmission[]
}

model GameRound {
  id            Int             @id @default(autoincrement())
  index         Int
  game          Game            @relation(fields: [gameId], references: [id])
  gameId        Int
  submission    MusicSubmission @relation(fields: [submissionId], references: [id])
  submissionId  Int
  hintShown     Boolean         @default(false) // Track if hint was revealed
  hintShownAt   DateTime? // When the hint was revealed
  guesses       Guess[]
  infoMessageId Int? // Message ID of the info message
  chatId        BigInt? // Telegram chat ID which the info message was sent

  @@unique([gameId, index])
}

model Guess {
  id          Int       @id @default(autoincrement())
  round       GameRound @relation(fields: [roundId], references: [id])
  roundId     Int
  user        User      @relation(fields: [userId], references: [id])
  userId      BigInt
  guessedId   BigInt // The ID of the user they guessed
  isCorrect   Boolean
  points      Int // Store points earned for this guess
  createdAt   DateTime  @default(now())
  isLateGuess Boolean   @default(false) // If guessed after round ended

  @@unique([roundId, userId])
}

import { Context } from "telegraf";
import { InlineKeyboardButton } from "telegraf/typings/core/types/typegram";
import { shuffleArray } from "../../utils/arrayUtils";
import { GameRepository } from "../repositories/GameRepository";
import { AppGameRound, AppMusicSubmission, AppUser } from "../../schemas";
import { MusicSubmissionRepository } from "../repositories/MusicSubmissionRepository";
import { getRandomResponse } from "../../config/botResponses";

export class MusicGameService {
  private getPointsWord(points: number): string {
    if (points === 1) return "–æ—á–∫–æ";
    if (points >= 2 && points <= 4) return "–æ—á–∫–∞";
    return "–æ—á–∫–æ–≤";
  }

  private readonly sarcasticResponses = {
    noGame: [
      "–û–π, –∞ –∏–≥—Ä—ã-—Ç–æ –Ω–µ—Ç! –ú–æ–∂–µ—Ç, –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –≤—Å–µ–ª–µ–Ω–Ω–æ–π?",
      "–ò–≥—Ä–∞? –ö–∞–∫–∞—è –∏–≥—Ä–∞? –Ø —Ç—É—Ç –ø—Ä–æ—Å—Ç–æ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã —Å—Ç–æ—é...",
      "404: –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –∏ –≤—ã–∫–ª—é—á–∏—Ç—å —Å–≤–æ—ë –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ.",
    ],
    noRounds: [
      "–í—Å—ë, —Ä–∞—É–Ω–¥—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! –ú–æ–∂–µ—Ç–µ —Ä–∞—Å—Ö–æ–¥–∏—Ç—å—Å—è –ø–æ –¥–æ–º–∞–º.",
      "–£—Ä–∞! –¢–æ –µ—Å—Ç—å... —ç—Ö–º... –±–æ–ª—å—à–µ —Ä–∞—É–Ω–¥–æ–≤ –Ω–µ—Ç. –ö–∞–∫–∞—è –∂–∞–ª–æ—Å—Ç—å (–Ω–µ –æ—á–µ–Ω—å).",
      "–†–∞—É–Ω–¥—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ù–∞–¥–µ—é—Å—å, –≤—ã –¥–æ–≤–æ–ª—å–Ω—ã —Ç–µ–º, —á—Ç–æ –Ω–∞—Ç–≤–æ—Ä–∏–ª–∏.",
    ],
    hintAlreadyShown: [
      "–ü–æ–¥—Å–∫–∞–∑–∫–∞ –£–ñ–ï –±—ã–ª–∞ –ø–æ–∫–∞–∑–∞–Ω–∞! –ú–æ–∂–µ—Ç, —Å—Ç–æ–∏—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Ç–∞–∫–∏–µ –≤–µ—â–∏?",
      "–û, –∫—Ç–æ-—Ç–æ –ø—Ä–æ—Å–ª—É—à–∞–ª –º–æ–º–µ–Ω—Ç —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π? –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ (–Ω–µ—Ç).",
      "–°–µ—Ä—å—ë–∑–Ω–æ? –û–ø—è—Ç—å –ø—Ä–æ—Å–∏—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫—É? –ê –ø–∞–º—è—Ç—å—é –∫–∞–∫ —É –∑–æ–ª–æ—Ç–æ–π —Ä—ã–±–∫–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å—Ç—Ä–∞–¥–∞–µ–º?",
    ],
    noHint: [
      "–î–ª—è —ç—Ç–æ–π –ø–µ—Å–Ω–∏ –Ω–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏. –í–∏–¥–∏–º–æ, –∞–≤—Ç–æ—Ä —Ä–µ—à–∏–ª —Å–¥–µ–ª–∞—Ç—å –≤–∞—à—É –∂–∏–∑–Ω—å –µ—â—ë —Å–ª–æ–∂–Ω–µ–µ.",
      "–ë–µ–∑ –ø–æ–¥—Å–∫–∞–∑–∫–∏? –•–∞! –£–¥–∞—á–∏ —Å —É–≥–∞–¥—ã–≤–∞–Ω–∏–µ–º!",
      "–£–ø—Å, –ø–æ–¥—Å–∫–∞–∑–∫–∏ –Ω–µ—Ç. –ü—Ä–∏–¥—ë—Ç—Å—è –≤–∫–ª—é—á–∏—Ç—å –º–æ–∑–≥... –µ—Å–ª–∏ –Ω–∞–π–¥—ë—Ç–µ.",
    ],
    gameStarted: [
      "–û, –≤–µ–ª–∏–∫–∏–π –º–æ–º–µ–Ω—Ç –Ω–∞—Å—Ç–∞–ª! –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—ë –º—É–∑—ã–∫–∞–ª—å–Ω–æ–µ –Ω–µ–≤–µ–∂–µ—Å—Ç–≤–æ!",
      "–î–∞ –Ω–∞—á–Ω—ë—Ç—Å—è –±–∏—Ç–≤–∞ —Ç–∏—Ç–∞–Ω–æ–≤! –ò–ª–∏ –∫—Ç–æ —Ç—É—Ç —É –Ω–∞—Å... –æ–±—ã—á–Ω—ã—Ö —Å–º–µ—Ä—Ç–Ω—ã—Ö?",
      "–ò–≥—Ä–∞ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª–∞! –ù–∞–¥–µ—é—Å—å, –≤—ã –≥–æ—Ç–æ–≤—ã –∫ –ø–æ–ª–Ω–æ–º—É —Ä–∞–∑–≥—Ä–æ–º—É –≤–∞—à–∏—Ö –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –∞–º–±–∏—Ü–∏–π!",
    ],
    noTracks: [
      "–ù–∏–∫—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç—Ä–µ–∫–∏. –í–∏–¥–∏–º–æ, –≤—Å–µ –≤–Ω–µ–∑–∞–ø–Ω–æ —Å—Ç–∞–ª–∏ —Å–∫—Ä–æ–º–Ω—ã–º–∏. –ö–∞–∫ –Ω–µ–æ–±—ã—á–Ω–æ!",
      "–û–π, –∞ —Ç—Ä–µ–∫–æ–≤-—Ç–æ –Ω–µ—Ç! –ú–æ–∂–µ—Ç, –æ—Ä–≥–∞–Ω–∏–∑—É–µ–º –∫–∞—Ä–∞–æ–∫–µ?",
      "–ë–µ–∑ —Ç—Ä–µ–∫–æ–≤ –∏–≥—Ä–∞ —Ç–∞–∫ —Å–µ–±–µ –ø–æ–ª—É—á–∏—Ç—Å—è. –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –Ω–µ –∏–≥—Ä–∞—Ç—å –≤ —Ç–∏—à–∏–Ω—É...",
    ],
    correctGuess: (points: number) => [
      `üéâ –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —ç—Ç–æ —É–≥–∞–¥–∞–ª–∏! ${points} ${this.getPointsWord(points)} –≤–∞—à–µ–º—É –±–ª–∞–≥–æ—Ä–æ–¥–∏—é!`,
      `üéâ –î–∞ –≤—ã, –Ω–∏–∫–∞–∫, –∑–Ω–∞—Ç–æ–∫! –ü–æ–ª—É—á–∏—Ç–µ ${points} ${this.getPointsWord(points)} –≤ –∫–æ–ø–∏–ª–∫—É –≤–∞—à–µ–≥–æ —ç–≥–æ!`,
      `üéâ –ö—Ç–æ-—Ç–æ —Ç—É—Ç –≥—É–≥–ª–∏–ª –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ–∑–ª–æ? ${points} ${this.getPointsWord(points)} –∑–∞ –≤–∞—à–∏ —Å—Ç–∞—Ä–∞–Ω–∏—è!`,
    ],
    wrongGuess: [
      "–≠—Ö, –º–∏–º–æ... –ú–æ–∂–µ—Ç, —Å—Ç–æ–∏—Ç –ø–æ–¥—É—á–∏—Ç—å –º–∞—Ç—á–∞—Å—Ç—å?",
      "–ù–µ —Ç–æ! –ù–æ –ø–æ–ø—ã—Ç–∫–∞ –±—ã–ª–∞... —Å–∫–∞–∂–µ–º —Ç–∞–∫, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è.",
      "–ú–∏–º–æ! –ù–æ –Ω–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å, –±—ã–≤–∞–µ—Ç –∏ —Ö—É–∂–µ... –•–æ—Ç—è –Ω–µ—Ç, –Ω–µ –±—ã–≤–∞–µ—Ç.",
    ],
  };

  constructor(
    private gameRepository: GameRepository,
    private musicSubmissionRepository: MusicSubmissionRepository,
  ) {}

  async addHint(submissionId: number, hint: string): Promise<void> {
    await this.musicSubmissionRepository.updateHint(submissionId, hint);
  }

  async isGameStarted(): Promise<boolean> {
    const game = await this.gameRepository.getCurrentGame();
    return !!game;
  }

  async startGame(ctx: Context) {
    const tracks: AppMusicSubmission[] = shuffleArray(
      await this.musicSubmissionRepository.findAll(),
    );
    if (!tracks.length) {
      await ctx.reply(getRandomResponse(this.sarcasticResponses.noTracks));
      return;
    }

    const game = await this.gameRepository.createGame(tracks);
    await ctx.reply(getRandomResponse(this.sarcasticResponses.gameStarted));
    return game;
  }
}

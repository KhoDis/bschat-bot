import { Context } from "telegraf";
import { InlineKeyboardButton } from "telegraf/typings/core/types/typegram";
import { shuffleArray } from "../../utils/arrayUtils";
import { GameRepository } from "../repositories/GameRepository";
import { AppGameRound, AppMusicSubmission, AppUser } from "../../schemas";
import { MusicSubmissionRepository } from "../repositories/MusicSubmissionRepository";
import { IBotContext } from "../../context/context.interface";

export class MusicGuessService {
  constructor(
    private gameRepository: GameRepository,
    private musicSubmissionRepository: MusicSubmissionRepository,
  ) {}

  async showHint(ctx: IBotContext) {
    const round = await this.gameRepository.getCurrentRound();
    if (!round) {
      await ctx.reply("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞");
      return;
    }

    if (round.hintShown) {
      await ctx.reply("–ü–æ–¥—Å–∫–∞–∑–∫–∞ —É–∂–µ –±—ã–ª–∞ –ø–æ–∫–∞–∑–∞–Ω–∞!");
      return;
    }

    const hint = round.submission.hint;
    if (!hint) {
      await ctx.reply("–î–ª—è —ç—Ç–æ–π –ø–µ—Å–Ω–∏ –Ω–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ :(");
      return;
    }

    await this.gameRepository.updateRoundHint(round.id, true);
    await ctx.reply(`üéµ –ü–æ–¥—Å–∫–∞–∑–∫–∞:\n\n${hint}`);
  }

  async addHint(submissionId: number, hint: string): Promise<void> {
    await this.musicSubmissionRepository.updateHint(submissionId, hint);
  }

  async isGameStarted(): Promise<boolean> {
    const game = await this.gameRepository.getCurrentGame();
    return !!game;
  }

  async startGame(ctx: Context) {
    const tracks: AppMusicSubmission[] = shuffleArray(
      await this.musicSubmissionRepository.findAll(),
    );
    if (!tracks.length) {
      await ctx.reply("–ù–∏–∫—Ç–æ –Ω–µ —Ä–µ—à–∏–ª—Å—è —É—á–∞–≤—Å—Ç–≤–æ–≤–∞—Ç—å :(");
      return;
    }

    const game = await this.gameRepository.createGame(tracks);

    await ctx.reply("–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –î–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞ –Ω–∞–∂–º–∏ /next_round");
    return game;
  }

  async processRound(ctx: Context) {
    const game = await this.gameRepository.getCurrentGame();
    if (!game) {
      await ctx.reply("–ù–µ—Ç—É –∏–≥—Ä—ã");
      return;
    }

    const currentRound = await this.gameRepository.getCurrentRound();
    if (!currentRound) {
      await ctx.reply("–ë–æ–ª—å—à–µ –Ω–µ—Ç —Ä–∞—É–Ω–¥–æ–≤");
      await this.showLeaderboard(ctx);
      await this.gameRepository.finishGame(game.id);
      return;
    }

    const participants = await this.gameRepository.getParticipants();

    await this.playRound(ctx, participants, currentRound);
  }

  private async playRound(
    ctx: Context,
    participants: AppUser[],
    currentRound: AppGameRound,
  ) {
    const buttons = participants.map((user) => ({
      text: user.name,
      callback_data: `guess:${currentRound.index}_${user.id}`,
    }));

    await ctx.replyWithAudio(currentRound.submission.fileId, {
      caption: "–£–≥–∞–¥—ã–≤–∞–µ–º!",
      reply_markup: { inline_keyboard: this.chunkButtons(buttons, 3) },
    });

    await this.sendRoundInfo(ctx);
  }

  async processGuess(
    ctx: Context,
    roundIndex: number,
    guessedUserId: number,
  ): Promise<void> {
    try {
      const game = await this.gameRepository.getCurrentGame();
      if (!game) {
        await ctx.answerCbQuery("–ò–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å :(");
        return;
      }

      const round = game.rounds.find((r) => r.index === roundIndex);
      if (!round) {
        await ctx.answerCbQuery("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ —Ä–∞—É–Ω–¥–∞ :(");
        return;
      }

      const guessingUserId = ctx.from?.id;
      if (!guessingUserId) {
        await ctx.answerCbQuery("–£ –≤–∞—Å –ø–æ—á–µ–º—É-—Ç–æ id –Ω–µ—Ç—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑");
        return;
      }

      // Check if user already guessed
      const existingGuess = await this.gameRepository.findGuess(
        round.id,
        guessingUserId,
      );
      if (existingGuess) {
        await ctx.answerCbQuery("–í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ –≥–æ–ª–æ—Å :(");
        return;
      }

      // Determine if this is a late guess
      const isLateGuess = roundIndex < game.currentRound;

      // Calculate points based on conditions
      const isCorrect = round.submission.userId === guessedUserId;
      let points = 0;
      if (isCorrect) {
        if (isLateGuess) {
          points = 1; // Late guess
        } else if (round.hintShown) {
          points = 2; // Correct guess with hint
        } else {
          points = 4; // Correct guess without hint
        }
      }

      // Create guess
      await this.gameRepository.createGuess({
        roundId: round.id,
        userId: guessingUserId,
        guessedId: guessedUserId,
        isCorrect,
        points,
        isLateGuess,
      });

      await ctx.answerCbQuery(
        isCorrect
          ? `üéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –í—ã –ø–æ–ª—É—á–∏–ª–∏ ${points} ${this.getPointsWord(points)}!`
          : "–≠—Ö, –º–∏–º–æ...",
      );

      await this.sendRoundInfo(ctx);
    } catch (e) {
      console.error(e);
    }
  }

  async nextRound(ctx: Context) {
    const game = await this.gameRepository.getCurrentGame();
    if (!game) {
      await ctx.reply("–ò–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å");
      return;
    }

    await this.gameRepository.updateGameRound(game.id, game.currentRound + 1);
    await this.processRound(ctx);
  }

  async showLeaderboard(ctx: Context) {
    const game = await this.gameRepository.getCurrentGame();
    if (!game) {
      await ctx.reply("–ò–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å.");
      return;
    }

    // Calculate user stats with points
    const userStats = new Map<
      number,
      {
        correct: number;
        incorrect: number;
        totalPoints: number;
      }
    >();

    for (const round of game.rounds) {
      for (const guess of round.guesses) {
        const stats = userStats.get(guess.userId) || {
          correct: 0,
          incorrect: 0,
          totalPoints: 0,
        };
        if (guess.isCorrect) {
          stats.correct++;
          stats.totalPoints += guess.points;
        } else {
          stats.incorrect++;
        }
        userStats.set(guess.userId, stats);
      }
    }

    const getUserByIdMap = new Map<number, AppUser>();
    for (const round of game.rounds) {
      getUserByIdMap.set(round.submission.userId, round.submission.user);
    }

    const sortedLeaderboard = [...userStats.entries()]
      .sort(([, a], [, b]) => b.totalPoints - a.totalPoints)
      .map(
        ([userId, stats], index) =>
          `${index + 1}. ${getUserByIdMap.get(userId)?.name || "Unknown"} ‚Äî üèÜ ${
            stats.totalPoints
          } –æ—á–∫–æ–≤ (üéØ ${stats.correct} —É–≥–∞–¥–∞–Ω–æ, ‚ùå ${stats.incorrect} –Ω–µ —É–≥–∞–¥–∞–Ω–æ)`,
      );

    // Calculate track difficulty
    const trackDifficulty = game.rounds.map((round) => {
      const correctGuesses = round.guesses.filter((g) => g.isCorrect).length;
      return {
        player: round.submission.user.name || "Unknown",
        correctGuesses,
        index: round.index,
      };
    });

    const sortedTracks = trackDifficulty
      .sort((a, b) => a.correctGuesses - b.correctGuesses)
      .map(
        (track, index) =>
          `${index + 1}. "${track.player}" ‚Äî ${track.correctGuesses} —É–≥–∞–¥–∞–ª–∏`,
      )
      .join("\n");

    const leaderboardText = (await Promise.all(sortedLeaderboard)).join("\n");
    await ctx.reply(
      `üèÜ –ò—Ç–æ–≥–∏ –∏–≥—Ä—ã üèÜ\n\n–ò–≥—Ä–æ–∫–∏:\n${leaderboardText}\n\n–°–∞–º—ã–µ —Å–ª–æ–∂–Ω—ã–µ —Ç—Ä–µ–∫–∏:\n${sortedTracks}`,
    );
  }

  private chunkButtons(buttons: InlineKeyboardButton[], size: number) {
    return Array.from({ length: Math.ceil(buttons.length / size) }, (_, i) =>
      buttons.slice(i * size, i * size + size),
    );
  }

  private getPointsWord(points: number): string {
    if (points === 1) return "–æ—á–∫–æ";
    if (points >= 2 && points <= 4) return "–æ—á–∫–∞";
    return "–æ—á–∫–æ–≤";
  }

  async formatRoundInfo(round: AppGameRound) {
    const notYetGuessed = await this.gameRepository.getUsersNotGuessed(
      round.id,
    );

    return `
      –†–∞—É–Ω–¥ ${round.index + 1}
      ${round.hintShown ? "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞ –±—ã–ª–∞ –ø–æ–∫–∞–∑–∞–Ω–∞" : ""}
      –ï—â—ë –¥—É–º–∞—é—Ç: ${notYetGuessed.map((u) => u.name).join(", ")}
      –£–≥–∞–¥–∞–ª–∏: ${round.guesses
        .filter((g) => g.isCorrect)
        .map(
          (g) => `${g.user.name} (${g.points} ${this.getPointsWord(g.points)})`,
        )
        .join(", ")}
      –ù–µ —É–≥–∞–¥–∞–ª–∏: ${round.guesses
        .filter((g) => !g.isCorrect)
        .map((g) => g.user.name)
        .join(", ")}
    `;
  }

  async sendRoundInfo(ctx: Context) {
    const round = await this.gameRepository.getCurrentRound();
    if (!round) {
      await ctx.reply("–ë–æ–ª—å—à–µ –Ω–µ—Ç —Ä–∞—É–Ω–¥–æ–≤");
      return;
    }

    const info = await this.formatRoundInfo(round);
    await ctx.reply(info);
  }
}

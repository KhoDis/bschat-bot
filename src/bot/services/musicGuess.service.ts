import { Context } from "telegraf";
import { InlineKeyboardButton } from "telegraf/typings/core/types/typegram";
import { shuffleArray } from "../../utils/arrayUtils";
import { GameRepository } from "../repositories/GameRepository";
import { AppGameRound, AppMusicSubmission, AppUser } from "../../schemas";
import { MusicSubmissionRepository } from "../repositories/MusicSubmissionRepository";
import { IBotContext } from "../../context/context.interface";

export class MusicGuessService {
  private readonly sarcasticResponses = {
    noGame: [
      "–û–π, –∞ –∏–≥—Ä—ã-—Ç–æ –Ω–µ—Ç! –ú–æ–∂–µ—Ç, –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –≤—Å–µ–ª–µ–Ω–Ω–æ–π?",
      "–ò–≥—Ä–∞? –ö–∞–∫–∞—è –∏–≥—Ä–∞? –Ø —Ç—É—Ç –ø—Ä–æ—Å—Ç–æ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã —Å—Ç–æ—é...",
      "404: –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –∏ –≤—ã–∫–ª—é—á–∏—Ç—å —Å–≤–æ—ë –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ.",
    ],
    noRounds: [
      "–í—Å—ë, —Ä–∞—É–Ω–¥—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! –ú–æ–∂–µ—Ç–µ —Ä–∞—Å—Ö–æ–¥–∏—Ç—å—Å—è –ø–æ –¥–æ–º–∞–º.",
      "–£—Ä–∞! –¢–æ –µ—Å—Ç—å... —ç—Ö–º... –±–æ–ª—å—à–µ —Ä–∞—É–Ω–¥–æ–≤ –Ω–µ—Ç. –ö–∞–∫–∞—è –∂–∞–ª–æ—Å—Ç—å (–Ω–µ –æ—á–µ–Ω—å).",
      "–†–∞—É–Ω–¥—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ù–∞–¥–µ—é—Å—å, –≤—ã –¥–æ–≤–æ–ª—å–Ω—ã —Ç–µ–º, —á—Ç–æ –Ω–∞—Ç–≤–æ—Ä–∏–ª–∏.",
    ],
    hintAlreadyShown: [
      "–ü–æ–¥—Å–∫–∞–∑–∫–∞ –£–ñ–ï –±—ã–ª–∞ –ø–æ–∫–∞–∑–∞–Ω–∞! –ú–æ–∂–µ—Ç, —Å—Ç–æ–∏—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Ç–∞–∫–∏–µ –≤–µ—â–∏?",
      "–û, –∫—Ç–æ-—Ç–æ –ø—Ä–æ—Å–ª—É—à–∞–ª –º–æ–º–µ–Ω—Ç —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π? –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ (–Ω–µ—Ç).",
      "–°–µ—Ä—å—ë–∑–Ω–æ? –û–ø—è—Ç—å –ø—Ä–æ—Å–∏—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫—É? –ê –ø–∞–º—è—Ç—å—é –∫–∞–∫ —É –∑–æ–ª–æ—Ç–æ–π —Ä—ã–±–∫–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å—Ç—Ä–∞–¥–∞–µ–º?",
    ],
    noHint: [
      "–î–ª—è —ç—Ç–æ–π –ø–µ—Å–Ω–∏ –Ω–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏. –í–∏–¥–∏–º–æ, –∞–≤—Ç–æ—Ä —Ä–µ—à–∏–ª —Å–¥–µ–ª–∞—Ç—å –≤–∞—à—É –∂–∏–∑–Ω—å –µ—â—ë —Å–ª–æ–∂–Ω–µ–µ.",
      "–ë–µ–∑ –ø–æ–¥—Å–∫–∞–∑–∫–∏? –•–∞! –£–¥–∞—á–∏ —Å —É–≥–∞–¥—ã–≤–∞–Ω–∏–µ–º!",
      "–£–ø—Å, –ø–æ–¥—Å–∫–∞–∑–∫–∏ –Ω–µ—Ç. –ü—Ä–∏–¥—ë—Ç—Å—è –≤–∫–ª—é—á–∏—Ç—å –º–æ–∑–≥... –µ—Å–ª–∏ –Ω–∞–π–¥—ë—Ç–µ.",
    ],
    gameStarted: [
      "–û, –≤–µ–ª–∏–∫–∏–π –º–æ–º–µ–Ω—Ç –Ω–∞—Å—Ç–∞–ª! –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—ë –º—É–∑—ã–∫–∞–ª—å–Ω–æ–µ –Ω–µ–≤–µ–∂–µ—Å—Ç–≤–æ!",
      "–î–∞ –Ω–∞—á–Ω—ë—Ç—Å—è –±–∏—Ç–≤–∞ —Ç–∏—Ç–∞–Ω–æ–≤! –ò–ª–∏ –∫—Ç–æ —Ç—É—Ç —É –Ω–∞—Å... –æ–±—ã—á–Ω—ã—Ö —Å–º–µ—Ä—Ç–Ω—ã—Ö?",
      "–ò–≥—Ä–∞ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª–∞! –ù–∞–¥–µ—é—Å—å, –≤—ã –≥–æ—Ç–æ–≤—ã –∫ –ø–æ–ª–Ω–æ–º—É —Ä–∞–∑–≥—Ä–æ–º—É –≤–∞—à–∏—Ö –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –∞–º–±–∏—Ü–∏–π!",
    ],
    noTracks: [
      "–ù–∏–∫—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç—Ä–µ–∫–∏. –í–∏–¥–∏–º–æ, –≤—Å–µ –≤–Ω–µ–∑–∞–ø–Ω–æ —Å—Ç–∞–ª–∏ —Å–∫—Ä–æ–º–Ω—ã–º–∏. –ö–∞–∫ –Ω–µ–æ–±—ã—á–Ω–æ!",
      "–û–π, –∞ —Ç—Ä–µ–∫–æ–≤-—Ç–æ –Ω–µ—Ç! –ú–æ–∂–µ—Ç, –æ—Ä–≥–∞–Ω–∏–∑—É–µ–º –∫–∞—Ä–∞–æ–∫–µ?",
      "–ë–µ–∑ —Ç—Ä–µ–∫–æ–≤ –∏–≥—Ä–∞ —Ç–∞–∫ —Å–µ–±–µ –ø–æ–ª—É—á–∏—Ç—Å—è. –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –Ω–µ –∏–≥—Ä–∞—Ç—å –≤ —Ç–∏—à–∏–Ω—É...",
    ],
    correctGuess: (points: number) => [
      `üéâ –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —ç—Ç–æ —É–≥–∞–¥–∞–ª–∏! ${points} ${this.getPointsWord(points)} –≤–∞—à–µ–º—É –±–ª–∞–≥–æ—Ä–æ–¥–∏—é!`,
      `üéâ –î–∞ –≤—ã, –Ω–∏–∫–∞–∫, –∑–Ω–∞—Ç–æ–∫! –ü–æ–ª—É—á–∏—Ç–µ ${points} ${this.getPointsWord(points)} –≤ –∫–æ–ø–∏–ª–∫—É –≤–∞—à–µ–≥–æ —ç–≥–æ!`,
      `üéâ –ö—Ç–æ-—Ç–æ —Ç—É—Ç –≥—É–≥–ª–∏–ª –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ–∑–ª–æ? ${points} ${this.getPointsWord(points)} –∑–∞ –≤–∞—à–∏ —Å—Ç–∞—Ä–∞–Ω–∏—è!`,
    ],
    wrongGuess: [
      "–≠—Ö, –º–∏–º–æ... –ú–æ–∂–µ—Ç, —Å—Ç–æ–∏—Ç –ø–æ–¥—É—á–∏—Ç—å –º–∞—Ç—á–∞—Å—Ç—å?",
      "–ù–µ —Ç–æ! –ù–æ –ø–æ–ø—ã—Ç–∫–∞ –±—ã–ª–∞... —Å–∫–∞–∂–µ–º —Ç–∞–∫, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è.",
      "–ú–∏–º–æ! –ù–æ –Ω–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å, –±—ã–≤–∞–µ—Ç –∏ —Ö—É–∂–µ... –•–æ—Ç—è –Ω–µ—Ç, –Ω–µ –±—ã–≤–∞–µ—Ç.",
    ],
    alreadyGuessed: [
      "–í—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏! –°–∫–ª–µ—Ä–æ–∑ –∑–∞–º—É—á–∏–ª?",
      "–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ? –ö—Ç–æ-—Ç–æ —è–≤–Ω–æ –Ω–µ —É–≤–µ—Ä–µ–Ω –≤ —Å–µ–±–µ...",
      "–ê –≤–æ—Ç –∏ –ª—é–±–∏—Ç–µ–ª—å –¥–≤–æ–π–Ω—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤! –ù–æ –Ω–µ—Ç, –æ–¥–∏–Ω –≥–æ–ª–æ—Å - —ç—Ç–æ –≤—Å—ë, —á—Ç–æ –≤—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç–µ.",
    ],
    nextRound: [
      "–°–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥! –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –Ω–æ–≤—ã–º —Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏—è–º!",
      "–û, –≤—ã –µ—â—ë –∑–¥–µ—Å—å? –ù—É –ª–∞–¥–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –º—É—á–µ–Ω–∏—è...",
      "–ù–æ–≤—ã–π —Ä–∞—É–Ω–¥! –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–ø–æ–∑–æ—Ä–∏—Ç—å—Å—è!",
    ],
  };

  constructor(
    private gameRepository: GameRepository,
    private musicSubmissionRepository: MusicSubmissionRepository,
  ) {}

  private getRandomResponse(responses: string[]): string {
    return responses[Math.floor(Math.random() * responses.length)] || "–ë–µ.";
  }

  async showHint(ctx: IBotContext) {
    const round = await this.gameRepository.getCurrentRound();
    if (!round) {
      await ctx.reply(this.getRandomResponse(this.sarcasticResponses.noGame));
      return;
    }

    if (round.hintShown) {
      await ctx.reply(
        this.getRandomResponse(this.sarcasticResponses.hintAlreadyShown),
      );
      return;
    }

    const hint = round.submission.hint;
    if (!hint) {
      await ctx.reply(this.getRandomResponse(this.sarcasticResponses.noHint));
      return;
    }

    await this.gameRepository.updateRoundHint(round.id, true);
    await ctx.reply(`üéµ –ü–æ–¥—Å–∫–∞–∑–∫–∞ (–¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Å–æ–≤—Å–µ–º –æ—Ç—á–∞—è–ª—Å—è):\n\n${hint}`);
  }

  async addHint(submissionId: number, hint: string): Promise<void> {
    await this.musicSubmissionRepository.updateHint(submissionId, hint);
  }

  async isGameStarted(): Promise<boolean> {
    const game = await this.gameRepository.getCurrentGame();
    return !!game;
  }

  async startGame(ctx: Context) {
    const tracks: AppMusicSubmission[] = shuffleArray(
      await this.musicSubmissionRepository.findAll(),
    );
    if (!tracks.length) {
      await ctx.reply(this.getRandomResponse(this.sarcasticResponses.noTracks));
      return;
    }

    const game = await this.gameRepository.createGame(tracks);
    await ctx.reply(
      this.getRandomResponse(this.sarcasticResponses.gameStarted),
    );
    return game;
  }

  async processRound(ctx: Context) {
    const game = await this.gameRepository.getCurrentGame();
    if (!game) {
      await ctx.reply(this.getRandomResponse(this.sarcasticResponses.noGame));
      return;
    }

    const currentRound = await this.gameRepository.getCurrentRound();
    if (!currentRound) {
      await ctx.reply(this.getRandomResponse(this.sarcasticResponses.noRounds));
      await this.showLeaderboard(ctx);
      await this.gameRepository.finishGame(game.id);
      return;
    }

    const participants = await this.gameRepository.getParticipants();
    await this.playRound(ctx, participants, currentRound);
  }

  private async playRound(
    ctx: Context,
    participants: AppUser[],
    currentRound: AppGameRound,
  ) {
    const buttons = participants.map((user) => ({
      text: user.name,
      callback_data: `guess:${currentRound.index}_${user.id}`,
    }));

    const captions = [
      "–£–≥–∞–¥—ã–≤–∞–µ–º! –ò–ª–∏ —Ö–æ—Ç—è –±—ã –¥–µ–ª–∞–µ–º –≤–∏–¥...",
      "–í—Ä–µ–º—è –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ—é –º—É–∑—ã–∫–∞–ª—å–Ω—É—é ~–±–µ–∑–≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å~ —ç—Ä—É–¥–∏—Ü–∏—é!",
      "–ù—É —á—Ç–æ, –≥–æ—Ç–æ–≤—ã –∫ –Ω–æ–≤—ã–º –º—É–∑—ã–∫–∞–ª—å–Ω—ã–º –æ—Ç–∫—Ä—ã—Ç–∏—è–º?",
      "–í–Ω–∏–º–∞–Ω–∏–µ! –°–µ–π—á–∞—Å –±—É–¥–µ—Ç —á—Ç–æ-—Ç–æ... –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ.",
    ];

    await ctx.replyWithAudio(currentRound.submission.fileId, {
      caption: this.getRandomResponse(captions),
      reply_markup: { inline_keyboard: this.chunkButtons(buttons, 3) },
    });

    await this.sendRoundInfo(ctx);
  }
  async processGuess(
    ctx: Context,
    roundIndex: number,
    guessedUserId: number,
  ): Promise<void> {
    try {
      const game = await this.gameRepository.getCurrentGame();
      if (!game) {
        await ctx.answerCbQuery(
          this.getRandomResponse(this.sarcasticResponses.noGame),
        );
        return;
      }

      const round = game.rounds.find((r) => r.index === roundIndex);
      if (!round) {
        await ctx.answerCbQuery(
          "–≠—Ç–æ—Ç —Ä–∞—É–Ω–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≤–∞—à–µ–º –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏–∏...",
        );
        return;
      }

      const guessingUserId = ctx.from?.id;
      if (!guessingUserId) {
        await ctx.answerCbQuery("–•–º... –ê –≤—ã —Ç–æ—á–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç–µ? ID –Ω–µ –Ω–∞–π–¥–µ–Ω!");
        return;
      }

      const existingGuess = await this.gameRepository.findGuess(
        round.id,
        guessingUserId,
      );
      if (existingGuess) {
        await ctx.answerCbQuery(
          this.getRandomResponse(this.sarcasticResponses.alreadyGuessed),
        );
        return;
      }

      const isLateGuess = roundIndex < game.currentRound;
      const isCorrect = round.submission.userId === guessedUserId;
      let points = 0;

      if (isCorrect) {
        if (isLateGuess) {
          points = 1;
        } else if (round.hintShown) {
          points = 2;
        } else {
          points = 4;
        }
      }

      await this.gameRepository.createGuess({
        roundId: round.id,
        userId: guessingUserId,
        guessedId: guessedUserId,
        isCorrect,
        points,
        isLateGuess,
      });

      await ctx.answerCbQuery(
        isCorrect
          ? this.getRandomResponse(this.sarcasticResponses.correctGuess(points))
          : this.getRandomResponse(this.sarcasticResponses.wrongGuess),
      );

      await this.sendRoundInfo(ctx);
    } catch (e) {
      console.error(e);
      await ctx.answerCbQuery("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ù–∞–≤–µ—Ä–Ω–æ–µ, —ç—Ç–æ –∫–∞—Ä–º–∞!");
    }
  }

  async nextRound(ctx: Context) {
    const game = await this.gameRepository.getCurrentGame();
    if (!game) {
      await ctx.reply(this.getRandomResponse(this.sarcasticResponses.noGame));
      return;
    }

    await ctx.reply(this.getRandomResponse(this.sarcasticResponses.nextRound));
    await this.gameRepository.updateGameRound(game.id, game.currentRound + 1);
    await this.processRound(ctx);
  }
  async showLeaderboard(ctx: Context) {
    const game = await this.gameRepository.getCurrentGame();
    if (!game) {
      await ctx.reply(
        "–û, —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è? –ù–æ —Å–Ω–∞—á–∞–ª–∞ –Ω–µ–ø–ª–æ—Ö–æ –±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!",
      );
      return;
    }

    // Calculate user stats with points
    const userStats = new Map<
      number,
      {
        correct: number;
        incorrect: number;
        totalPoints: number;
      }
    >();

    for (const round of game.rounds) {
      for (const guess of round.guesses) {
        const stats = userStats.get(guess.userId) || {
          correct: 0,
          incorrect: 0,
          totalPoints: 0,
        };
        if (guess.isCorrect) {
          stats.correct++;
          stats.totalPoints += guess.points;
        } else {
          stats.incorrect++;
        }
        userStats.set(guess.userId, stats);
      }
    }

    const getUserByIdMap = new Map<number, AppUser>();
    for (const round of game.rounds) {
      getUserByIdMap.set(round.submission.userId, round.submission.user);
    }

    const sortedLeaderboard = [...userStats.entries()]
      .sort(([, a], [, b]) => b.totalPoints - a.totalPoints)
      .map(
        ([userId, stats], index) =>
          `${index + 1}. ${getUserByIdMap.get(userId)?.name || "Unknown"} ‚Äî üèÜ ${
            stats.totalPoints
          } –æ—á–∫–æ–≤ (üéØ ${stats.correct} —É–≥–∞–¥–∞–Ω–æ, ‚ùå ${stats.incorrect} –Ω–µ —É–≥–∞–¥–∞–Ω–æ)`,
      );

    // Calculate track difficulty
    const trackDifficulty = game.rounds.map((round) => {
      const correctGuesses = round.guesses.filter((g) => g.isCorrect).length;
      return {
        player: round.submission.user.name || "Unknown",
        correctGuesses,
        index: round.index,
      };
    });

    const sortedTracks = trackDifficulty
      .sort((a, b) => a.correctGuesses - b.correctGuesses)
      .map(
        (track, index) =>
          `${index + 1}. "${track.player}" ‚Äî ${track.correctGuesses} —É–≥–∞–¥–∞–ª–∏`,
      )
      .join("\n");

    const leaderboardIntros = [
      "üèÜ –í–Ω–∏–º–∞–Ω–∏–µ! –°–µ–π—á–∞—Å –±—É–¥–µ—Ç –æ—á–µ–Ω—å —Å–º–µ—à–Ω–æ... —Ç–æ –µ—Å—Ç—å, –∏—Ç–æ–≥–∏ –∏–≥—Ä—ã! üèÜ",
      "üèÜ –ë–∞—Ä–∞–±–∞–Ω–Ω–∞—è –¥—Ä–æ–±—å! –í—Ä–µ–º—è —É–∑–Ω–∞—Ç—å, –∫—Ç–æ —Ç—É—Ç —Å–∞–º—ã–π... –Ω—É, —Å–∫–∞–∂–µ–º —Ç–∞–∫, –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π! üèÜ",
      "üèÜ –ò—Ç–æ–≥–∏ –∏–≥—Ä—ã! –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ –ø–ª–∞—Ç–æ—á–∫–∏ - –±—É–¥–µ—Ç –∏ —Å–º–µ—à–Ω–æ, –∏ –≥—Ä—É—Å—Ç–Ω–æ! üèÜ",
    ];

    const trackIntros = [
      "\n\n–ê —Ç–µ–ø–µ—Ä—å —Å–∞–º–æ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ - —Ç—Ä–µ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∑–≤–∞–ª–∏ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Å—Ç—Ä–∞–¥–∞–Ω–∏–π:",
      "\n\n–†–µ–π—Ç–∏–Ω–≥ —Ç—Ä–µ–∫–æ–≤ '–ü–æ—á–µ–º—É —è —ç—Ç–æ–≥–æ –Ω–µ –∑–Ω–∞—é?!':",
      "\n\n–°–∞–º—ã–µ –∫–æ–≤–∞—Ä–Ω—ã–µ —Ç—Ä–µ–∫–∏ —ç—Ç–æ–π –∏–≥—Ä—ã:",
    ];

    const leaderboardText = (await Promise.all(sortedLeaderboard)).join("\n");
    await ctx.reply(
      `${this.getRandomResponse(leaderboardIntros)}\n\n–ì–µ—Ä–æ–∏ –Ω–∞—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏:\n${leaderboardText}${this.getRandomResponse(trackIntros)}\n${sortedTracks}`,
    );
  }

  private async formatRoundInfo(round: AppGameRound) {
    const notYetGuessed = await this.gameRepository.getUsersNotGuessed(
      round.id,
    );
    const thinkingPhrases = [
      "–í—Å—ë –µ—â—ë –≤ —Ä–∞–∑–¥—É–º—å—è—Ö",
      "–ú—É—á–∞—é—Ç—Å—è —Å –æ—Ç–≤–µ—Ç–æ–º",
      "–ü–æ–≥—Ä—É–∂–µ–Ω—ã –≤ –≥–ª—É–±–æ–∫–∏–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è",
      "–ò–∑–æ–±—Ä–∞–∂–∞—é—Ç –º—ã—Å–ª–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å",
    ];

    const correctPhrases = [
      "–°—á–∞—Å—Ç–ª–∏–≤—á–∏–∫–∏ —É–≥–∞–¥–∞–≤—à–∏–µ",
      "–ó–Ω–∞—Ç–æ–∫–∏ (–∏–ª–∏ –≤–µ–∑—É–Ω—á–∏–∫–∏?)",
      "–ö–∞–∫–∏–º-—Ç–æ —á—É–¥–æ–º —É–≥–∞–¥–∞–ª–∏",
    ];

    const wrongPhrases = [
      "–ü—Ä–æ–º–∞—Ö–Ω—É–ª–∏—Å—å –º–∏–º–æ –∫–∞—Å—Å—ã",
      "–ù–µ —É–≥–∞–¥–∞–ª–∏ (–∫–∞–∫ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ!)",
      "–ü–æ–ø—ã—Ç–∞–ª–∏—Å—å, –Ω–æ —É–≤—ã",
    ];

    return `
        üéØ –†–∞—É–Ω–¥ ${round.index + 1} - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤–µ—Å–µ–ª–∏—Ç—å—Å—è!
        ${round.hintShown ? "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞ –±—ã–ª–∞ –ø–æ–∫–∞–∑–∞–Ω–∞ (–¥–ª—è –æ—Å–æ–±–æ –æ–¥–∞—Ä—ë–Ω–Ω—ã—Ö)" : ""}
        
        ${this.getRandomResponse(thinkingPhrases)}: ${notYetGuessed.map((u) => u.name).join(", ")}
        
        ${this.getRandomResponse(correctPhrases)}: ${
          round.guesses
            .filter((g) => g.isCorrect)
            .map(
              (g) =>
                `${g.user.name} (${g.points} ${this.getPointsWord(g.points)})`,
            )
            .join(", ") || "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ! –ù–µ—É–∂–µ–ª–∏ —Ç–∞–∫ —Å–ª–æ–∂–Ω–æ?"
        }
        
        ${this.getRandomResponse(wrongPhrases)}: ${
          round.guesses
            .filter((g) => !g.isCorrect)
            .map((g) => g.user.name)
            .join(", ") || "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –æ—à–∏–±—Å—è. –ù–æ —ç—Ç–æ –Ω–µ–Ω–∞–¥–æ–ª–≥–æ!"
        }
      `;
  }

  private chunkButtons(buttons: InlineKeyboardButton[], size: number) {
    return Array.from({ length: Math.ceil(buttons.length / size) }, (_, i) =>
      buttons.slice(i * size, i * size + size),
    );
  }

  private getPointsWord(points: number): string {
    if (points === 1) return "–æ—á–∫–æ";
    if (points >= 2 && points <= 4) return "–æ—á–∫–∞";
    return "–æ—á–∫–æ–≤";
  }

  async sendRoundInfo(ctx: Context) {
    const round = await this.gameRepository.getCurrentRound();
    if (!round) {
      await ctx.reply("–ë–æ–ª—å—à–µ –Ω–µ—Ç —Ä–∞—É–Ω–¥–æ–≤");
      return;
    }

    const info = await this.formatRoundInfo(round);
    await ctx.reply(info);
  }
}

import { Composer, Context } from "telegraf";
import { injectable } from "inversify";
import { IBotContext } from "@/context/context.interface";
import { randomInt } from "crypto";

@injectable()
export class SorryComposer extends Composer<IBotContext> {
  private apologyCounter: Map<number, number> = new Map();
  private readonly STICKERS = [
    "CAACAgIAAxkBAAKluGf0Fnpz6OzwjIZJc9pMsd0zMUaEAALyagACR5aoSRoNRPHRrJ-_NgQ",
    "CAACAgIAAxkBAAKlu2f0FoxQFqj_PMdvrHAzu6vkWpP2AAKZRgACQRgoS7q0M1Edekf4NgQ",
    "CAACAgIAAxkBAAKlvmf0FqfwceSQ5Y455UPtjjyuu3XoAALBagACSUmRSxm8R0e6OduJNgQ",
  ];

  constructor() {
    super();
    this.setupApologyHandlers();
  }

  private setupApologyHandlers() {
    const apologyPatterns = [
      /(–∏–∑–≤–∏–Ω–∏|–ø—Ä–æ—Å—Ç–∏|—Å–æ—Ä—Ä–∏|–≤–∏–Ω–æ–≤–∞—Ç|sorry|apologize)/i,
      /(\b–∏–∑–≤\b|\b—Å–æ—Ä—è–Ω\b|\b—Å–æ—Ä—å\b)/i,
    ];

    apologyPatterns.forEach((pattern) => {
      this.hears(pattern, async (ctx, next) => {
        if (!ctx.from) return next();

        const userId = ctx.from.id;
        const count = (this.apologyCounter.get(userId) || 0) + 1;
        this.apologyCounter.set(userId, count);

        // 30% chance to activate special response
        if (Math.random() < 0.3) {
          await this.executeSpecialAction(ctx, count);
        } else {
          await next();
        }
      });
    });
  }

  private async executeSpecialAction(ctx: Context, apologyCount: number) {
    const actions = [
      this.sendRandomSticker,
      this.createApologyQuest,
      this.reverseMessage,
      this.translateToKlingon,
      this.startApologyGame,
    ];

    const action = actions[randomInt(actions.length)]!;
    await action.call(this, ctx, apologyCount);
  }

  private async sendRandomSticker(ctx: Context) {
    const sticker = this.STICKERS[randomInt(this.STICKERS.length)]!;
    await ctx.replyWithSticker(sticker);
  }

  private async createApologyQuest(ctx: Context) {
    const quests = [
      '–ß—Ç–æ–±—ã —è –ø—Ä–∏–Ω—è–ª –∏–∑–≤–∏–Ω–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∫–æ—Ç–∏–∫–∞ —Å –ø–æ–¥–ø–∏—Å—å—é "–Ø –±–æ–ª—å—à–µ —Ç–∞–∫ –Ω–µ –±—É–¥—É"',
      "–î–æ–∫–∞–∂–∏ –∏—Å–∫—Ä–µ–Ω–Ω–æ—Å—Ç—å: –ø—Ä–æ–π–¥–∏ 3 –∫—Ä—É–≥–∞ –≤–æ–∫—Ä—É–≥ —Å—Ç—É–ª–∞ –∏ —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
      '–î–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —á–∞—Ç–∞ –ø—Ä–æ–∏–∑–Ω–µ—Å–∏ "–Ø –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É –∏–∑–≤–∏–Ω—è—Ç—å—Å—è" 3 —Ä–∞–∑–∞ –≤—Å–ª—É—Ö',
    ];
    await ctx.reply(quests[randomInt(quests.length)]!);
  }

  private async reverseMessage(ctx: Context) {
    if (!ctx.message) return;
    if (!("text" in ctx.message)) return;

    await ctx.reply(
      ctx.message.text.split("").reverse().join("") +
        "\n\n(–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —è–∑—ã–∫: —è –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É)",
    );
  }

  private async translateToKlingon(ctx: Context) {
    await ctx.replyWithMarkdownV2(
      "`tlhIngan Hol: Qapla'!`\n" +
        '_–≠—Ç–æ –∑–Ω–∞—á–∏—Ç "–Ø –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É" –Ω–∞ –∫–ª–∏–Ω–≥–æ–Ω—Å–∫–æ–º_',
    );
  }

  private async startApologyGame(ctx: Context, count: number) {
    if (!(ctx.message && "text" in ctx.message)) return;
    const milestones = [3, 5, 10];
    const achievements = [
      "ü•â –ë—Ä–æ–Ω–∑–æ–≤—ã–π –ò–∑–≤–∏–Ω—è–ª—å—â–∏–∫",
      "ü•à –°–µ—Ä–µ–±—Ä—è–Ω—ã–π –†–∞—Å–∫–∞—è—Ç–µ–ª—å",
      "üèÜ –ó–æ–ª–æ—Ç–æ–π –ú–∞—Å—Ç–µ—Ä –°–æ—Ä—è–Ω",
    ];

    const index = milestones.findIndex((m) => count === m);
    if (index !== -1) {
      await ctx.replyWithDice({
        message_thread_id: ctx.message.message_thread_id!,
      });
      await ctx.reply(
        `–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${achievements[index]}!\n` +
          `–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ –¥–ª—è –Ω–æ–≤—ã—Ö —É—Ä–æ–≤–Ω–µ–π!`,
      );
    }
  }
}

import { Composer, Context } from "telegraf";
import { injectable } from "inversify";
import { IBotContext } from "@/context/context.interface";
import { randomInt } from "crypto";

@injectable()
export class SorryComposer extends Composer<IBotContext> {
  private apologyCounter: Map<number, number> = new Map();
  private readonly STICKERS = [
    "CAACAgIAAxkBAAKluGf0Fnpz6OzwjIZJc9pMsd0zMUaEAALyagACR5aoSRoNRPHRrJ-_NgQ",
    "CAACAgIAAxkBAAKlu2f0FoxQFqj_PMdvrHAzu6vkWpP2AAKZRgACQRgoS7q0M1Edekf4NgQ",
    "CAACAgIAAxkBAAKlvmf0FqfwceSQ5Y455UPtjjyuu3XoAALBagACSUmRSxm8R0e6OduJNgQ",
    "CAACAgIAAxkBAAKlwWf0HcmY3OCd7_CcPzlAfM5tGRIFAAJXgwACAkOQS45lnhCSoq8MNgQ",
    "CAACAgIAAxkBAAKlxGf0HeFQUlookzE6M2ymIuXDpTpXAAIDUwACMb2oSYkZBV3I0_XNNgQ",
    "CAACAgIAAxkBAAKlx2f0HfEjFgFf1xDChsKqNPdH-FlwAAJ7UQACT1moSX9Sud2ncpEHNgQ",
    "CAACAgIAAxkBAAKlymf0HgLdnLPfAAG2wRzT4ZhgztSNZQACUEcAAqImqEnUYlVVxhjHIzYE",
    "CAACAgIAAxkBAAKlzWf0Hhr8IYJBC-9eFQABOOc6LB72JgACbSEAAo6dAAFI7ON6RhMaI4A2BA",
  ];

  // Emoji reactions for the emoji action
  private readonly REACTIONS = [
    "üòÖ",
    "üôè",
    "ü•∫",
    "ü´£",
    "ü§∑‚Äç‚ôÇÔ∏è",
    "üôÑ",
    "ü§å",
    "üëâüëà",
  ];

  // Poems for the poetry action
  private readonly APOLOGY_POEMS = [
    "Roses are red,\nViolets are blue,\nI said I'm sorry,\nWhat more can I do?",
    "An apology slipped,\nFrom my guilty tongue,\nPlease accept it now,\nOr I'll remain unsung.",
    "Sorry, sorry, triple sorry,\nMy guilt is heavy, don't you worry,\nI promise to do better soon,\nJust forgive me by high noon.",
  ];

  constructor() {
    super();
    this.setupApologyHandlers();
  }

  private setupApologyHandlers() {
    // Extended with more apology patterns, including Russian and English variations
    const apologyPatterns = [
      /(–∏–∑–≤–∏–Ω–∏|uzur|—É–∑—É—Ä|–ø—Ä–æ—Å—Ç–∏|—Å–æ—Ä—Ä–∏|—Å–æ—Ä—è–Ω|–≤–∏–Ω–æ–≤–∞—Ç|sorry|apologize|my bad|–º–æ–π –∫–æ—Å—è–∫|–ø–∞—Ä–¥–æ–Ω|excuse me|forgive me)/i,
    ];

    apologyPatterns.forEach((pattern) => {
      this.hears(pattern, async (ctx, next) => {
        if (!ctx.from) return next();

        const userId = ctx.from.id;
        const count = (this.apologyCounter.get(userId) || 0) + 1;
        this.apologyCounter.set(userId, count);

        await this.executeSpecialAction(ctx, count);
        await next();
      });
    });
  }

  private async executeSpecialAction(ctx: Context, apologyCount: number) {
    const actions = [
      this.sendRandomSticker,
      this.createApologyQuest,
      this.reverseMessage,
      this.translateToKlingon,
      this.sendApologyMeme,
      this.generateWeirdTranslation,
      this.sendApologyPoem,
      this.apologyReactionAnimation,
      this.startApologyCountdown,
    ];

    const action = actions[randomInt(actions.length)]!;
    await action.call(this, ctx);
    await this.startApologyGame.call(this, ctx, apologyCount);
  }

  private async sendRandomSticker(ctx: Context) {
    const sticker = this.STICKERS[randomInt(this.STICKERS.length)]!;
    await ctx.replyWithSticker(sticker);
  }

  private async createApologyQuest(ctx: Context) {
    const quests = [
      '–ß—Ç–æ–±—ã —è –ø—Ä–∏–Ω—è–ª –∏–∑–≤–∏–Ω–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∫–æ—Ç–∏–∫–∞ —Å –ø–æ–¥–ø–∏—Å—å—é "–Ø –±–æ–ª—å—à–µ —Ç–∞–∫ –Ω–µ –±—É–¥—É"',
      "–î–æ–∫–∞–∂–∏ –∏—Å–∫—Ä–µ–Ω–Ω–æ—Å—Ç—å: –ø—Ä–æ–π–¥–∏ 3 –∫—Ä—É–≥–∞ –≤–æ–∫—Ä—É–≥ —Å—Ç—É–ª–∞ –∏ —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
      '–î–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —á–∞—Ç–∞ –ø—Ä–æ–∏–∑–Ω–µ—Å–∏ "–Ø –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É –∏–∑–≤–∏–Ω—è—Ç—å—Å—è" 3 —Ä–∞–∑–∞ –≤—Å–ª—É—Ö',
      "–ù–∞–ø–∏—à–∏ –æ—Ç —Ä—É–∫–∏ –∑–∞–ø–∏—Å–∫—É —Å –∏–∑–≤–∏–Ω–µ–Ω–∏—è–º–∏, —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π –∏ –æ—Ç–ø—Ä–∞–≤—å —Å—é–¥–∞",
      '–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—â–µ–Ω–∏–µ, –∑–∞–ø–∏—à–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≥–¥–µ —Ç—ã –ø–æ—ë—à—å "Sorry" –î–∂–∞—Å—Ç–∏–Ω–∞ –ë–∏–±–µ—Ä–∞',
      "–ü—Ä–∏–¥—É–º–∞–π 3 –ø—Ä–∏—á–∏–Ω—ã, –ø–æ—á–µ–º—É —Ç—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—à—å –ø—Ä–æ—â–µ–Ω–∏—è, –∏ –∑–∞–ø–∏—à–∏ –∏—Ö –Ω–∞ —Å—Ç–∏–∫–µ—Ä–∞—Ö",
    ];
    await ctx.reply(quests[randomInt(quests.length)]!);
  }

  private async reverseMessage(ctx: Context) {
    if (!ctx.message || !("text" in ctx.message)) {
      await ctx.reply(
        "–Ø –¥–∞–∂–µ –Ω–µ –º–æ–≥—É –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞–¥–æ–º –Ω–∞–ø–µ—Ä—ë–¥! –ü–æ–ø—Ä–æ–±—É–π —Ç–µ–∫—Å—Ç–æ–º!",
      );
      return;
    }

    await ctx.reply(
      ctx.message.text.split("").reverse().join("") +
        "\n\n(–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —è–∑—ã–∫: —è –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É)",
    );
  }

  private async translateToKlingon(ctx: Context) {
    const klingonPhrases = [
      '`tlhIngan Hol: Qapla\'!`\n_–≠—Ç–æ –∑–Ω–∞—á–∏—Ç "–Ø –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É" –Ω–∞ –∫–ª–∏–Ω–≥–æ–Ω—Å–∫–æ–º_',
      '`tlhIngan Hol: jIQoS!`\n_–≠—Ç–æ –∑–Ω–∞—á–∏—Ç "–ü—Ä–æ—Å—Ç–∏ –º–µ–Ω—è" –Ω–∞ –∫–ª–∏–Ω–≥–æ–Ω—Å–∫–æ–º_',
      '`tlhIngan Hol: jISaHbe\'!`\n_–≠—Ç–æ –∑–Ω–∞—á–∏—Ç "–Ø –±—ã–ª –Ω–µ–ø—Ä–∞–≤" –Ω–∞ –∫–ª–∏–Ω–≥–æ–Ω—Å–∫–æ–º_',
    ];

    await ctx.replyWithMarkdownV2(
      klingonPhrases[randomInt(klingonPhrases.length)]!,
    );
  }

  private async startApologyGame(ctx: Context, count: number) {
    if (!ctx.message) return;

    const milestones = [3, 5, 10, 20, 50];
    const achievements = [
      "ü•â –ë—Ä–æ–Ω–∑–æ–≤—ã–π –ò–∑–≤–∏–Ω—è–ª—å—â–∏–∫",
      "ü•à –°–µ—Ä–µ–±—Ä—è–Ω—ã–π –†–∞—Å–∫–∞—è—Ç–µ–ª—å",
      "üèÜ –ó–æ–ª–æ—Ç–æ–π –ú–∞—Å—Ç–µ—Ä –°–æ—Ä—è–Ω",
      "üíé –ü–ª–∞—Ç–∏–Ω–æ–≤—ã–π –õ–æ—Ä–¥ –ò–∑–≤–∏–Ω–µ–Ω–∏–π",
      "üëë –ò–º–ø–µ—Ä–∞—Ç–æ—Ä –í—Å–µ–ª–µ–Ω—Å–∫–æ–≥–æ –°–æ–∂–∞–ª–µ–Ω–∏—è",
    ];

    // Make sure message_thread_id exists or is undefined
    const threadId = ctx.message.message_thread_id;
    const messageOptions = threadId ? { message_thread_id: threadId } : {};

    const index = milestones.findIndex((m) => count === m); // Changed to exact matches
    if (index !== -1) {
      await ctx.replyWithDice(messageOptions);
      await ctx.reply(
        `–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${achievements[index]}!\n` +
          `–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ –¥–ª—è –Ω–æ–≤—ã—Ö —É—Ä–æ–≤–Ω–µ–π!\n` +
          `–¢–µ–∫—É—â–∏–π —Å—á—ë—Ç –∏–∑–≤–∏–Ω–µ–Ω–∏–π: ${count}`,
      );
    } else {
      // Random chance to show progress
      if (randomInt(3) === 0) {
        const nextMilestone =
          milestones.find((m) => m > count) ||
          milestones[milestones.length - 1];
        await ctx.reply(
          `–°—á—ë—Ç—á–∏–∫ –∏–∑–≤–∏–Ω–µ–Ω–∏–π: ${count}/${nextMilestone} –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!`,
        );
      }
    }
  }

  // New methods below

  private async sendApologyMeme(ctx: Context) {
    const memes = [
      "https://i.imgflip.com/7xcyj7.jpg",
      "https://i.imgflip.com/7xcysx.jpg",
      "https://i.imgflip.com/7xcyvj.jpg",
    ];

    await ctx.replyWithPhoto(memes[randomInt(memes.length)]!, {
      caption: "–ò–∑–≤–∏–Ω–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç—ã –≤ –º–µ–º–Ω–æ–π —Ñ–æ—Ä–º–µ!",
    });
  }

  private async generateWeirdTranslation(ctx: Context) {
    if (!ctx.message || !("text" in ctx.message)) return;

    const weirdLanguages = [
      {
        name: "–ü–∏—Ä–∞—Ç—Å–∫–∏–π",
        translation:
          "–ô–æ-—Ö–æ-—Ö–æ! –ü—Ä–æ—â–µ–Ω—å—è –ø—Ä–æ—Å–∏—à—å, –º–æ—Ä—Å–∫–æ–π –≤–æ–ª–∫? –ö–ª—è–Ω—É—Å—å –±–æ—Ä–æ–¥–æ–π –ù–µ–ø—Ç—É–Ω–∞, —Ç–∞–∫ —É–∂ –∏ –±—ã—Ç—å!",
      },
      {
        name: "–Ø–∑—ã–∫ –∫–æ—Ç–∏–∫–æ–≤",
        translation: "–ú—è—É –º—É—Ä –º—è—É! *—É—Ä—á–∏—Ç* –ú—Ä—Ä—Ä –º—è—É! *—Ç—Ä—ë—Ç—Å—è –æ –Ω–æ–≥—É* –ú—É—Ä!",
      },
      {
        name: "–Ø–∑—ã–∫ —ç–ª—å—Ñ–æ–≤",
        translation:
          "Ai lauri√´ lantar lassi s√∫rinen, mellon nin. –¢–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç—ã, –æ –¥–∏—Ç—è –∑–≤—ë–∑–¥.",
      },
      {
        name: "–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤",
        translation:
          "if (apology === true) {\n  return 'accepted';\n} else {\n  throw new Error('Try harder');\n}",
      },
    ];

    const language = weirdLanguages[randomInt(weirdLanguages.length)]!;

    await ctx.reply(
      `–¢–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è –Ω–∞ ${language.name}:\n\n${language.translation}\n\n(–ë–æ—Ç –ø–µ—Ä–µ–≤—ë–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –≤–æ–∑–º–æ–∂–Ω—ã –æ—à–∏–±–∫–∏)`,
    );
  }

  private async sendApologyPoem(ctx: Context) {
    if (!ctx.chat) return;
    const poem = this.APOLOGY_POEMS[randomInt(this.APOLOGY_POEMS.length)]!;

    await ctx.reply(`üé≠ *–ü–æ—ç—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ –∏–∑–≤–∏–Ω–µ–Ω–∏–π* üé≠\n\n${poem}`, {
      parse_mode: "Markdown",
    });
  }

  private async apologyReactionAnimation(ctx: Context) {
    if (!ctx.chat) return;
    if (!ctx.message) return;

    const message = await ctx.reply("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è...");

    // React with a sequence of emojis
    const maxReactions = 5;
    const reactions = [];

    for (let i = 0; i < maxReactions; i++) {
      reactions.push(this.REACTIONS[randomInt(this.REACTIONS.length)]!);
    }

    // Send a series of edited messages to simulate animation
    for (let i = 0; i < reactions.length; i++) {
      const currentEmojis = reactions.slice(0, i + 1).join(" ");
      await ctx.telegram.editMessageText(
        ctx.chat.id,
        message.message_id,
        undefined,
        `–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è${".".repeat(i % 4)}\n${currentEmojis}`,
      );

      // Small delay between edits
      await new Promise((resolve) => setTimeout(resolve, 1000));
    }

    // Final message
    await ctx.telegram.editMessageText(
      ctx.chat.id,
      message.message_id,
      undefined,
      `–ò–∑–≤–∏–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏ ${Math.random() > 0.5 ? "–ø—Ä–∏–Ω—è—Ç—ã" : "—É—Å–ª–æ–≤–Ω–æ –ø—Ä–∏–Ω—è—Ç—ã"}!\n${reactions.join(" ")}`,
    );
  }

  private async startApologyCountdown(ctx: Context) {
    if (!ctx.chat) return;
    if (!ctx.message) return;

    const initialTime = 10; // seconds

    const message = await ctx.reply(
      `‚è≥ –¢–∞–π–º–µ—Ä –ø—Ä–æ—â–µ–Ω–∏—è: ${initialTime} —Å–µ–∫—É–Ω–¥\n–ü–æ–¥–æ–∂–¥–∏, –ø–æ–∫–∞ —è –ø–æ–¥—É–º–∞—é –Ω–∞–¥ —Ç–≤–æ–∏–º–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è–º–∏...`,
    );

    // Countdown animation
    for (let i = initialTime - 1; i >= 0; i--) {
      await new Promise((resolve) => setTimeout(resolve, 1000));

      // Skip some updates to make it less spammy
      if (i % 2 === 0 || i <= 3) {
        await ctx.telegram.editMessageText(
          ctx.chat.id,
          message.message_id,
          undefined,
          `‚è≥ –¢–∞–π–º–µ—Ä –ø—Ä–æ—â–µ–Ω–∏—è: ${i} —Å–µ–∫—É–Ω–¥\n–ü–æ–¥–æ–∂–¥–∏, –ø–æ–∫–∞ —è –ø–æ–¥—É–º–∞—é –Ω–∞–¥ —Ç–≤–æ–∏–º–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è–º–∏...`,
        );
      }
    }

    // Final result
    const results = [
      "‚úÖ –ò–∑–≤–∏–Ω–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç—ã! –ú–æ–∂–µ—à—å —Å–ø–∞—Ç—å —Å–ø–æ–∫–æ–π–Ω–æ.",
      "‚ùå –ò–∑–≤–∏–Ω–µ–Ω–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.",
      "‚ö†Ô∏è –£—Å–ª–æ–≤–Ω–æ –ø—Ä–∏–Ω—è—Ç–æ. –ë—É–¥–µ–º –Ω–∞–±–ª—é–¥–∞—Ç—å –∑–∞ —Ç–≤–æ–∏–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º.",
      "üé≤ –ë—Ä–æ—Å–∞—é –∫—É–±–∏–∫ —Å—É–¥—å–±—ã... –¢–µ–±–µ –ø–æ–≤–µ–∑–ª–æ —Å–µ–≥–æ–¥–Ω—è!",
      "üìù –ò–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞–Ω–µ—Å–µ–Ω—ã –≤ –ø—Ä–æ—Ç–æ–∫–æ–ª –∏ –±—É–¥—É—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω—ã –∫–æ–º–∏—Ç–µ—Ç–æ–º.",
    ];

    await ctx.telegram.editMessageText(
      ctx.chat.id,
      message.message_id,
      undefined,
      results[randomInt(results.length)]!,
    );
  }
}

import { IBotContext } from "@/context/context.interface";
import { Composer } from "telegraf";
import { inject, injectable } from "inversify";

import natural from "natural";
import { createApi } from "unsplash-js";
import { ConfigService } from "@/config/config.service";
import { TYPES } from "@/types";

// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ–¥—ã –∏ –∏—Ö –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
const FOOD_CATEGORIES = {
  pizza: ["–ø–∏—Ü—Ü–∞", "–ø–∏—Ü—Ü—É", "–ø–∏—Ü—Ü–µ–π", "–ø–∏—Ü—Ü–µ—Ä–∏—è", "–ø–∏—Ü—Ü–∞–π–æ–ª–æ"],
  burger: ["–±—É—Ä–≥–µ—Ä", "—á–∏–∑–±—É—Ä–≥–µ—Ä", "–±—É—Ä–≥–µ—Ä—ã", "–±—é—Ä–≥–µ—Ä", "–≥–∞–º–±—É—Ä–≥–µ—Ä"],
  sushi: [
    "—Å—É—à–∏",
    "—Ä–æ–ª–ª—ã",
    "—Å–∞—à–∏–º–∏",
    "–Ω–∏–≥–∏—Ä–∏",
    "—É—Ä–∞–º–∞–∫–∏",
    "—Ñ–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è",
    "–∫–∞–ª–∏—Ñ–æ—Ä–Ω–∏—è",
  ],
  dessert: [
    "—Ç–æ—Ä—Ç",
    "–¥–µ—Å–µ—Ä—Ç",
    "–º–æ—Ä–æ–∂–µ–Ω–æ–µ",
    "–ø–∏—Ä–æ–∂–Ω–æ–µ",
    "—á–∏–∑–∫–µ–π–∫",
    "—Ç–∏—Ä–∞–º–∏—Å—É",
    "–∫–µ–∫—Å",
    "–º–∞—Ñ—Ñ–∏–Ω",
    "—ç–∫–ª–µ—Ä",
    "–ø–æ–Ω—á–∏–∫",
  ],
  pasta: [
    "–ø–∞—Å—Ç–∞",
    "—Å–ø–∞–≥–µ—Ç—Ç–∏",
    "–º–∞–∫–∞—Ä–æ–Ω—ã",
    "—Ñ–µ—Ç—É—á–∏–Ω–∏",
    "—Ä–∞–≤–∏–æ–ª–∏",
    "–ª–∞–∑–∞–Ω—å—è",
    "–∫–∞–Ω–Ω–µ–ª–ª–æ–Ω–∏",
    "–ø–∞—Å—Ç–∞ –∫–∞—Ä–±–æ–Ω–∞—Ä–∞",
  ],
  salad: ["—Å–∞–ª–∞—Ç", "—Ü–µ–∑–∞—Ä—å", "–≥—Ä–µ—á–µ—Å–∫–∏–π", "–æ–ª–∏–≤—å–µ", "–≤–∏–Ω–µ–≥—Ä–µ—Ç", "–∫–∞–ø—Ä–µ–∑–µ"],
  soup: ["—Å—É–ø", "–±–æ—Ä—â", "—â–∏", "—Å–æ–ª—è–Ω–∫–∞", "—Ö–∞—Ä—á–æ", "—Ç–æ–º —è–º", "–∫—É—Ä–∏–Ω—ã–π —Å—É–ø"],
  breakfast: [
    "–∑–∞–≤—Ç—Ä–∞–∫",
    "–æ–º–ª–µ—Ç",
    "–≥–ª–∞–∑—É–Ω—å—è",
    "–±–ª–∏–Ω—ã",
    "—Å—ã—Ä–Ω–∏–∫–∏",
    "–∫–∞—à–∞",
    "–≥—Ä–∞–Ω–æ–ª–∞",
  ],
  meat: [
    "—Å—Ç–µ–π–∫",
    "–º—è—Å–æ",
    "–≥–æ–≤—è–¥–∏–Ω–∞",
    "—Å–≤–∏–Ω–∏–Ω–∞",
    "–±–∞—Ä–∞–Ω–∏–Ω–∞",
    "–∞–Ω—Ç—Ä–µ–∫–æ—Ç",
    "—Ä–µ–±—Ä—ã—à–∫–∏",
    "—à–∞—à–ª—ã–∫",
  ],
  seafood: [
    "–º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã",
    "–∫—Ä–µ–≤–µ—Ç–∫–∏",
    "–º–∏–¥–∏–∏",
    "–∫–∞–ª—å–º–∞—Ä—ã",
    "–æ—Å—å–º–∏–Ω–æ–≥",
    "—É—Å—Ç—Ä–∏—Ü—ã",
    "–ª–æ–±—Å—Ç–µ—Ä",
  ],
  asian: ["—Ä–∞–º–µ–Ω", "—É–¥–æ–Ω", "—Ç–æ–º —è–º", "–ø–µ–ª—å–º–µ–Ω–∏", "–≤–æ–∫", "–¥–æ–Ω–±—É—Ä–∏", "—Å–∞—Ç–∞–π"],
  russian: [
    "–ø–µ–ª—å–º–µ–Ω–∏",
    "–±–ª–∏–Ω—ã",
    "–±–æ—Ä—â",
    "–æ–∫—Ä–æ—à–∫–∞",
    "—Å–æ–ª—è–Ω–∫–∞",
    "—Ö–æ–ª–æ–¥–µ—Ü",
    "—Å–µ–ª–µ–¥–∫–∞ –ø–æ–¥ —à—É–±–æ–π",
  ],
  vegan: [
    "–≤–µ–≥–∞–Ω",
    "—Ç–æ—Ñ—É",
    "—Ñ–∞–ª–∞—Ñ–µ–ª—å",
    "—Ö—É–º—É—Å",
    "–±—É—Ä–≥–µ—Ä –≤–µ–≥–∞–Ω—Å–∫–∏–π",
    "–æ–≤–æ—â–∏ –≥—Ä–∏–ª—å",
  ],
  fastfood: [
    "—Ñ–∞—Å—Ç—Ñ—É–¥",
    "–∫–∞—Ä—Ç–æ—à–∫–∞ —Ñ—Ä–∏",
    "–Ω–∞–≥–≥–µ—Ç—Å—ã",
    "—Ö–æ—Ç –¥–æ–≥",
    "—à–∞—É—Ä–º–∞",
    "–±—É—Ä–≥–µ—Ä",
  ],
  bakery: [
    "—Ö–ª–µ–±",
    "–±—É–ª–æ—á–∫–∞",
    "–±–∞–≥–µ—Ç",
    "–∫—Ä—É–∞—Å—Å–∞–Ω",
    "–ø–∏—Ä–æ–≥",
    "–ø–∏—Ä–æ–∂–æ–∫",
    "–±—É–±–ª–∏–∫",
  ],
  coffee: ["–∫–æ—Ñ–µ", "–∫–∞–ø—É—á–∏–Ω–æ", "—ç—Å–ø—Ä–µ—Å—Å–æ", "–ª–∞—Ç—Ç–µ", "–º–æ–∫–∫–∞", "–∞–º–µ—Ä–∏–∫–∞–Ω–æ"],
  tea: ["—á–∞–π"],
  drink: ["–ª–∏–º–æ–Ω–∞–¥", "—Å–º—É–∑–∏", "–∫–æ–∫—Ç–µ–π–ª—å", "–º–∏–ª–∫—à–µ–π–∫", "—Ñ—Ä–µ—à"],
  alcohol: ["–≤–∏–Ω–æ", "–ø–∏–≤–æ", "–∫–æ–∫—Ç–µ–π–ª—å", "–≤–∏—Å–∫–∏", "—Ä–æ–º", "–¥–∂–∏–Ω", "—à–∞–º–ø–∞–Ω—Å–∫–æ–µ"],
  fruit: ["—Ñ—Ä—É–∫—Ç—ã", "—è–±–ª–æ–∫–æ", "–±–∞–Ω–∞–Ω", "–∞–ø–µ–ª—å—Å–∏–Ω", "–∫–∏–≤–∏", "–º–∞–Ω–≥–æ", "–∞–Ω–∞–Ω–∞—Å"],
  vegetable: ["–æ–≤–æ—â–∏", "–º–æ—Ä–∫–æ–≤—å", "–ø–æ–º–∏–¥–æ—Ä", "–æ–≥—É—Ä–µ—Ü", "–±—Ä–æ–∫–∫–æ–ª–∏", "–∞–≤–æ–∫–∞–¥–æ"],
  cheese: ["—Å—ã—Ä", "–±—Ä—ã–Ω–∑–∞", "–º–æ—Ü–∞—Ä–µ–ª–ª–∞", "—á–µ–¥–¥–µ—Ä", "–ø–∞—Ä–º–µ–∑–∞–Ω", "—Ñ–µ—Ç–∞"],
  chocolate: ["—à–æ–∫–æ–ª–∞–¥", "—à–æ–∫–æ–ª–∞–¥–∫–∞", "–∫–æ–Ω—Ñ–µ—Ç—ã", "–ø—Ä–∞–ª–∏–Ω–µ", "—Ç—Ä—é—Ñ–µ–ª—å"],
  bbq: ["–≥—Ä–∏–ª—å", "–±–∞—Ä–±–µ–∫—é", "—à–∞—à–ª—ã–∫", "—Å—Ç–µ–π–∫", "–∫—É—Ä–∏—Ü–∞ –≥—Ä–∏–ª—å"],
};

const unsplash = createApi({
  accessKey: process.env["UNSPLASH_ACCESS_KEY"]!,
});

@injectable()
export class FoodComposer extends Composer<IBotContext> {
  private tokenizer: natural.WordTokenizer;
  private stemmer: natural.Stemmer;

  private stemToCategoryMap: Map<string, string> = new Map();

  private buildStemToCategoryMap() {
    for (const [category, keywords] of Object.entries(FOOD_CATEGORIES)) {
      for (const keyword of keywords) {
        const stem = this.stemmer.stem(keyword);
        this.stemToCategoryMap.set(stem, category);
      }
    }
  }

  constructor(@inject(TYPES.ConfigService) private config: ConfigService) {
    super();
    this.setupFoodListener();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Unsplash

    // NLP –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
    this.tokenizer = new natural.WordTokenizer();
    this.stemmer = natural.PorterStemmerRu;
    this.buildStemToCategoryMap();
  }

  private setupFoodListener() {
    this.on("message", async (ctx, next) => {
      if (!ctx.message || !("text" in ctx.message)) return;
      const text = ctx.message.text.toLowerCase();
      const tokens = this.tokenizer.tokenize(text);
      const stems = tokens.map((token) => this.stemmer.stem(token));

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –µ–¥—ã
      const detectedCategory = this.detectFoodCategory(stems);
      if (!detectedCategory) return;

      // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –∏–∑ Unsplash
      try {
        const photoData = await this.fetchUnsplashPhoto(detectedCategory);
        const attribution = `||Photo by [${photoData.authorName}](https://unsplash.com/@${photoData.authorUsername}) on [Unsplash](https://unsplash.com)||`;
        const photoUrl = photoData.url;
        await ctx.replyWithPhoto(photoUrl, {
          caption: `–í–æ—Ç —Ç–≤–æ—è ${detectedCategory}\\! üçΩÔ∏è\n\n${attribution}`,
          parse_mode: "MarkdownV2",
        });
      } catch (error) {
        await ctx.reply(
          `–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ... –ú–æ–∂–µ—Ç, —Å—ä–µ—à—å —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ? üòÖ \n\n${error}`,
        );
      }

      await next();
    });
  }

  private detectFoodCategory(stems: string[]): string | null {
    for (const stem of stems) {
      const category = this.stemToCategoryMap.get(stem);
      if (category) {
        return category;
      }
    }
    return null;
  }

  private async fetchUnsplashPhoto(category: string): Promise<{
    url: string;
    authorName: string;
    authorUsername: string;
  }> {
    const result = await unsplash.photos.getRandom({
      query: category,
      count: 1,
    });

    if (result.errors || !result.response) {
      throw new Error(`Unsplash error: ${result.errors}`);
    }

    const photo = Array.isArray(result.response)
      ? result.response[0]
      : result.response;

    if (
      !photo ||
      !photo.urls?.regular ||
      !photo.user?.name ||
      !photo.user?.username
    ) {
      throw new Error("No photo or author found");
    }

    return {
      url: photo.urls.regular,
      authorName: photo.user.name,
      authorUsername: photo.user.username,
    };
  }
}

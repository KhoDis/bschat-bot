import { IBotContext } from "@/context/context.interface";
import { Composer } from "telegraf";
import { inject, injectable } from "inversify";
import natural from "natural";
import { createApi } from "unsplash-js";
import { ConfigService } from "@/config/config.service";
import { TYPES } from "@/types";

const FOOD_CATEGORIES = {
  "omelet breakfast": ["–æ–º–ª–µ—Ç", "—è–∏—á–Ω–∏—Ü–∞", "–≥–ª–∞–∑—É–Ω—å—è"],
  "pancakes with syrup": ["–±–ª–∏–Ω—ã", "–±–ª–∏–Ω—á–∏–∫–∏"],
  "bowl of porridge": ["–∫–∞—à–∞", "–æ–≤—Å—è–Ω–∫–∞"],
  "buttered toast": ["—Ç–æ—Å—Ç", "—Ç–æ—Å—Ç—ã"],
  "granola bowl": ["–≥—Ä–∞–Ω–æ–ª–∞", "–º—é—Å–ª–∏"],
  "yogurt with berries": ["–π–æ–≥—É—Ä—Ç"],

  "italian pizza": ["–ø–∏—Ü—Ü–∞", "–ø–∏—Ü—Ü—É", "–ø–∏—Ü—Ü–µ–π", "–ø–∏—Ü—Ü–µ—Ä–∏—è", "–ø–∏—Ü—Ü–∞-–∏—Ç–∞–ª—å—è–Ω–∞"],
  "juicy burger": ["–±—É—Ä–≥–µ—Ä", "—á–∏–∑–±—É—Ä–≥–µ—Ä", "–≥–∞–º–±—É—Ä–≥–µ—Ä", "–±—É—Ä–≥–µ—Ä–Ω–∞—è"],
  "hot dog street food": ["—Ö–æ—Ç–¥–æ–≥"],

  "japanese ramen": ["—Ä–∞–º–µ–Ω"],
  "udon noodles": ["—É–¥–æ–Ω"],
  "pho soup": ["—Ñ–æ-–±–æ"],
  "tom yum soup": ["—Ç–æ–º-—è–º"],
  "donburi rice bowl": ["–¥–æ–Ω–±—É—Ä–∏"],
  "baozi buns": ["–±–∞–æ—Ü–∑—ã"],
  "korean kimchi": ["–∫–∏–º—á–∏"],
  "wok noodles": ["–≤–æ–∫"],

  "sushi set": ["—Å—É—à–∏", "—Ä–æ–ª–ª—ã", "—Å–∞—à–∏–º–∏", "–Ω–∏–≥–∏—Ä–∏", "—É—Ä–∞–º–∞–∫–∏", "–≥—É–Ω–∫–∞–Ω"],

  pelmeni: ["–ø–µ–ª—å–º–µ–Ω–∏"],
  "borscht soup": ["–±–æ—Ä—â"],
  "olivier salad": ["–æ–ª–∏–≤—å–µ"],
  "vinaigrette salad": ["–≤–∏–Ω–µ–≥—Ä–µ—Ç"],
  "okroshka soup": ["–æ–∫—Ä–æ—à–∫–∞"],
  "solyanka soup": ["—Å–æ–ª—è–Ω–∫–∞"],
  "russian fish soup": ["—É—Ö–∞"],
  "belarus draniki": ["–¥—Ä–∞–Ω–∏–∫–∏"],

  "plov pilaf": ["–ø–ª–æ–≤"],

  "italian pasta": ["–ø–∞—Å—Ç–∞", "—Å–ø–∞–≥–µ—Ç—Ç–∏", "—Ñ–µ—Ç—É—á–∏–Ω–∏", "–ª–∞–∑–∞–Ω—å—è", "—Ä–∞–≤–∏–æ–ª–∏"],
  "pasta carbonara": ["–∫–∞—Ä–±–æ–Ω–∞—Ä–∞"],
  "pasta bolognese": ["–±–æ–ª–æ–Ω—å–µ–∑–µ"],

  "beef steak": ["—Å—Ç–µ–π–∫", "–∞–Ω—Ç—Ä–µ–∫–æ—Ç"],
  "pork chop": ["—Å–≤–∏–Ω–∏–Ω–∞", "–∫–∞—Ä–±–æ–Ω–∞–¥", "—Ä–µ–±—Ä—ã—à–∫–∏"],
  "grilled lamb": ["–±–∞—Ä–∞–Ω–∏–Ω–∞"],
  "grilled chicken": ["–∫—É—Ä–∏—Ü–∞", "–∫—É—Ä–æ—á–∫–∞", "–∫—É—Ä–∏—Ü–∞ –≥—Ä–∏–ª—å"],
  "meat barbecue": ["—à–∞—à–ª—ã–∫", "–≥—Ä–∏–ª—å", "–±–∞—Ä–±–µ–∫—é"],

  "grilled salmon": ["–ª–æ—Å–æ—Å—å"],
  "tuna fillet": ["—Ç—É–Ω–µ—Ü"],
  "cod fish": ["—Ç—Ä–µ—Å–∫–∞"],
  "shrimp dish": ["–∫—Ä–µ–≤–µ—Ç–∫–∏"],
  "grilled squid": ["–∫–∞–ª—å–º–∞—Ä—ã"],
  "cooked octopus": ["–æ—Å—å–º–∏–Ω–æ–≥"],
  "fresh oysters": ["—É—Å—Ç—Ä–∏—Ü—ã"],
  "lobster plate": ["–ª–æ–±—Å—Ç–µ—Ä"],
  "black caviar": ["–∏–∫—Ä–∞"],

  "falafel plate": ["—Ñ–∞–ª–∞—Ñ–µ–ª—å"],
  "hummus dip": ["—Ö—É–º—É—Å"],
  "tofu dish": ["—Ç–æ—Ñ—É"],
  "seitan vegan": ["—Å–µ–π—Ç–∞–Ω"],

  "fresh salad": ["—Å–∞–ª–∞—Ç", "—Ü–µ–∑–∞—Ä—å", "–≥—Ä–µ—á–µ—Å–∫–∏–π", "–≤–∏–Ω–µ–≥—Ä–µ—Ç", "–∫–∞–ø—Ä–µ–∑–µ"],
  "bowl of soup": ["—Å—É–ø", "—â–∏", "—Ö–∞—Ä—á–æ", "–∫—Ä–µ–º-—Å—É–ø", "–±—É–ª—å–æ–Ω"],

  "slice of cake": ["—Ç–æ—Ä—Ç", "—á–∏–∑–∫–µ–π–∫", "–ø–∏—Ä–æ–∂–Ω–æ–µ", "—Ç–∏—Ä–∞–º–∏—Å—É", "—ç–∫–ª–µ—Ä"],
  "muffin dessert": ["–º–∞—Ñ—Ñ–∏–Ω", "–∫–µ–∫—Å"],
  "glazed donut": ["–ø–æ–Ω—á–∏–∫"],
  "ice cream scoop": ["–º–æ—Ä–æ–∂–µ–Ω–æ–µ"],
  "chocolate sweets": ["—à–æ–∫–æ–ª–∞–¥", "–∫–æ–Ω—Ñ–µ—Ç—ã", "—Ç—Ä—é—Ñ–µ–ª—å", "–∫–∞–∫–∞–æ"],

  "croissant pastry": ["–∫—Ä—É–∞—Å—Å–∞–Ω"],
  "fruit pie": ["–ø–∏—Ä–æ–≥", "–ø–∏—Ä–æ–∂–æ–∫"],
  "fresh bread": ["—Ö–ª–µ–±", "–±–∞—Ç–æ–Ω", "–±–∞–≥–µ—Ç", "–ª–∞–≤–∞—à", "–±—É–ª–æ—á–∫–∞"],

  "fresh fruit": [
    "—è–±–ª–æ–∫–æ",
    "–±–∞–Ω–∞–Ω",
    "–º–∞–Ω–≥–æ",
    "–∞–Ω–∞–Ω–∞—Å",
    "–∫–∏–≤–∏",
    "–∞–ø–µ–ª—å—Å–∏–Ω",
    "–≤–∏–Ω–æ–≥—Ä–∞–¥",
  ],
  "fresh vegetables": [
    "–ø–æ–º–∏–¥–æ—Ä",
    "–æ–≥—É—Ä–µ—Ü",
    "–º–æ—Ä–∫–æ–≤—å",
    "–±—Ä–æ–∫–∫–æ–ª–∏",
    "–∫–∞–±–∞—á–æ–∫",
    "–±–∞–∫–ª–∞–∂–∞–Ω",
    "–∞–≤–æ–∫–∞–¥–æ",
  ],

  "cheese plate": [
    "—Å—ã—Ä",
    "–º–æ—Ü–∞—Ä–µ–ª–ª–∞",
    "—á–µ–¥–¥–µ—Ä",
    "–ø–∞—Ä–º–µ–∑–∞–Ω",
    "—Ñ–µ—Ç–∞",
    "—Ä–∏–∫–æ—Ç—Ç–∞",
    "–±—Ä—ã–Ω–∑–∞",
  ],

  "fruit smoothie": ["—Å–º—É–∑–∏"],
  "lemonade drink": ["–ª–∏–º–æ–Ω–∞–¥"],
  "milkshake with cream": ["–º–∏–ª–∫—à–µ–π–∫"],
  "fresh juice": ["—Ñ—Ä–µ—à", "–º–æ—Ä—Å", "–∫–æ–º–ø–æ—Ç"],

  "cup of coffee": [
    "–∫–æ—Ñ–µ",
    "–∫–∞–ø—É—á–∏–Ω–æ",
    "–ª–∞—Ç—Ç–µ",
    "—ç—Å–ø—Ä–µ—Å—Å–æ",
    "–º–æ–∫–∫–∞",
    "—Ä–∞—Ñ",
    "–∞–º–µ—Ä–∏–∫–∞–Ω–æ",
  ],
  "tea in teapot": ["—á–∞–π", "–º–∞—Ç–µ", "–ø—É—ç—Ä", "—É–ª—É–Ω", "–∫–∞—Ä–∫–∞–¥–µ"],

  "glass of wine": ["–≤–∏–Ω–æ"],
  "cold beer": ["–ø–∏–≤–æ"],
  "glass of whiskey": ["–≤–∏—Å–∫–∏"],
  "rum cocktail": ["—Ä–æ–º"],
  "gin tonic": ["–¥–∂–∏–Ω"],
  "champagne celebration": ["—à–∞–º–ø–∞–Ω—Å–∫–æ–µ"],
  "glass of cognac": ["–∫–æ–Ω—å—è–∫"],
  vodka: ["–≤–æ–¥–∫–∞"],

  "doner kebab": [
    "—à–∞—É—Ä–º–∞",
    "—à–∞–≤–µ—Ä–º–∞",
    "—à–∞—É—Ä–º—É",
    "—à–∞–≤—É—Ö—É",
    "—à–∞–≤—É—Ö–∞",
    "—à–∞—É—Ä–º–æ—á–∫–∞",
    "—à–∞–≤–µ—Ä–º–æ—á–∫–∞",
    "doner",
    "–¥–æ–Ω–µ—Ä",
    "–¥–æ–Ω–µ—Ä –∫–µ–±–∞–±",
    "–¥–æ–Ω–µ—Ä-–∫–µ–±–∞–±",
    "–∫–µ–±–∞–±",
  ],
};

@injectable()
export class FoodComposer extends Composer<IBotContext> {
  private tokenizer: natural.WordTokenizer;
  private stemmer: natural.Stemmer;
  private stemToCategoryMap: Map<string, string> = new Map();
  private unsplash: ReturnType<typeof createApi>;

  constructor(@inject(TYPES.ConfigService) private config: ConfigService) {
    super();
    this.unsplash = createApi({
      accessKey: this.config.get("UNSPLASH_ACCESS_KEY"),
    });

    this.tokenizer = new natural.WordTokenizer();
    this.stemmer = natural.PorterStemmerRu;
    this.buildStemToCategoryMap();
    this.setupFoodListener();
  }

  private buildStemToCategoryMap() {
    for (const [category, keywords] of Object.entries(FOOD_CATEGORIES)) {
      for (const keyword of keywords) {
        const stem = this.stemmer.stem(keyword);
        if (!this.stemToCategoryMap.has(stem)) {
          this.stemToCategoryMap.set(stem, category);
        }
      }
    }
  }

  private setupFoodListener() {
    this.on("message", async (ctx, next) => {
      if (!ctx.message || !("text" in ctx.message)) return;

      const text = ctx.message.text.toLowerCase();
      const tokens = this.tokenizer.tokenize(text);
      const stems = tokens.map((token) => this.stemmer.stem(token));

      const detectedCategory = this.detectFoodCategory(stems);
      if (!detectedCategory) return;

      const { stem, category } = detectedCategory;

      try {
        const fullQuery = `${category}`;

        const photoData = await this.fetchUnsplashPhoto(fullQuery);
        const attribution = `||–§–æ—Ç–æ: [${photoData.authorName}](https://unsplash.com/@${photoData.authorUsername}) / Unsplash||`;
        await ctx.replyWithPhoto(photoData.url, {
          caption: `–í–æ—Ç —Ç–≤–æ—è ${fullQuery}\\! üçΩÔ∏è\n\n${attribution}`,
          parse_mode: "MarkdownV2",
        });
      } catch (error) {
        await ctx.reply(
          `–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–æ—Ç–æ... –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å! üòÖ \n\n${error}`,
        );
      }

      await next();
    });
  }

  private detectFoodCategory(
    stems: string[],
  ): { stem: string; category: string } | null {
    for (const stem of stems) {
      const category = this.stemToCategoryMap.get(stem);
      if (category) return { stem, category };
    }
    return null;
  }

  private async fetchUnsplashPhoto(
    fullQuery: string,
  ): Promise<{ url: string; authorName: string; authorUsername: string }> {
    const result = await this.unsplash.photos.getRandom({
      query: fullQuery,
      count: 1,
      orientation: "landscape",
    });

    if (result.errors || !result.response) {
      throw new Error(result.errors?.[0] || "Unknown error");
    }

    const photo = Array.isArray(result.response)
      ? result.response[0]
      : result.response;

    if (!photo || !photo.urls?.regular || !photo.user) {
      throw new Error("Invalid photo response");
    }

    return {
      url: photo.urls.regular,
      authorName: photo.user.name || "Unknown",
      authorUsername: photo.user.username || "unknown",
    };
  }
}

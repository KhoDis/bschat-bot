import { IBotContext } from "@/context/context.interface";
import { Composer, NarrowedContext } from "telegraf";
import { Message, Update } from "telegraf/types";
import { MemberService } from "../services/MemberService";
import { TextService } from "@/bot/services/TextService";
import { inject, injectable } from "inversify";
import { TYPES } from "@/types";

type CommandContext = NarrowedContext<
  IBotContext,
  Update.MessageUpdate<Message.TextMessage>
>;

@injectable()
export class JokerComposer extends Composer<IBotContext> {
  private readonly roasts = [
    "–¢–≤–æ–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –º–æ–∂–Ω–æ —É–º–µ—Å—Ç–∏—Ç—å –Ω–∞ —Ñ–ª–µ—à–∫–µ 256 –ö–±.",
    "–ï—Å–ª–∏ –±—ã —Ç—É–ø–æ—Å—Ç—å —Å–≤–µ—Ç–∏–ª–∞—Å—å, —Ç—ã –±—ã–ª –±—ã —Å–æ–ª–Ω—Ü–µ–º.",
    "–¢—ã –∫–∞–∫ Wi-Fi –≤ –º–µ—Ç—Ä–æ ‚Äì –∏–Ω–æ–≥–¥–∞ –ª–æ–≤–∏—à—å, –Ω–æ –≤ —Ü–µ–ª–æ–º –Ω–µ—Ç.",
    "–¢–≤–æ–π —Å–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å ‚Äì —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–º–∞–π–ª—ã.",
    "–¢—ã ‚Äî –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ, —á—Ç–æ —ç–≤–æ–ª—é—Ü–∏—è –∏–Ω–æ–≥–¥–∞ –∏–¥—ë—Ç –≤ –æ–±—Ä–∞—Ç–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É.",
    "–£ —Ç–µ–±—è —Å—Ç–æ–ª—å–∫–æ —Ö–∞—Ä–∏–∑–º—ã, —Å–∫–æ–ª—å–∫–æ FPS –≤ Minecraft –Ω–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ.",
    "–ï—Å–ª–∏ –±—ã –±—ã–ª –∫–æ–Ω–∫—É—Ä—Å –Ω–∞ —Ö—É–¥—à–µ–µ –æ–ø—Ä–∞–≤–¥–∞–Ω–∏–µ, —Ç—ã –±—ã –ø—Ä–æ–∏–≥—Ä–∞–ª.",
    "–¢—ã –Ω–∞—Å—Ç–æ–ª—å–∫–æ –ª–µ–Ω–∏–≤—ã–π, —á—Ç–æ —Ç–≤–æ—è —Ç–µ–Ω—å –¥–≤–∏–≥–∞–µ—Ç—Å—è –±–æ–ª—å—à–µ, —á–µ–º —Ç—ã.",
    "–Ø –±—ã —Ç–µ–±—è —É–Ω–∏–∑–∏–ª, –Ω–æ –ø—Ä–∏—Ä–æ–¥–∞ —É–∂–µ —Å–¥–µ–ª–∞–ª–∞ —ç—Ç–æ –∑–∞ –º–µ–Ω—è.",
    "–¢—ã –∫–∞–∫ –±—É–¥–∏–ª—å–Ω–∏–∫ –±–µ–∑ –±–∞—Ç–∞—Ä–µ–π–∫–∏ ‚Äì –±–µ—Å–ø–æ–ª–µ–∑–µ–Ω –∏ —Ä–∞–∑–¥—Ä–∞–∂–∞–µ—à—å.",
    "–¢–≤–æ–π IQ –º–æ–∂–Ω–æ –∏–∑–º–µ—Ä—è—Ç—å –≤ –∫–æ–º–Ω–∞—Ç–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ (–≤ –≥—Ä–∞–¥—É—Å–∞—Ö –¶–µ–ª—å—Å–∏—è).",
    "–ï—Å–ª–∏ –±—ã —Ç—É–ø–æ—Å—Ç—å –±—ã–ª–∞ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ–º, —Ç—ã –±—ã –ø–æ–ª—É—á–∏–ª –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Å—Ä–æ–∫.",
    "–£ —Ç–µ–±—è –µ—Å—Ç—å —Ç–∞–ª–∞–Ω—Ç! –ü—Ä–∞–≤–¥–∞, –Ω–∏–∫—Ç–æ –ø–æ–∫–∞ –Ω–µ –ø–æ–Ω—è–ª, –∫–∞–∫–æ–π.",
    "–¢–≤–æ–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ç–∞–∫–∏–µ –∂–µ —Å–ª–∞–±—ã–µ, –∫–∞–∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –≤ –¥–µ—Ä–µ–≤–Ω–µ.",
    "–¢—ã –∫–∞–∫ NPC –≤ —Å—Ç–∞—Ä—ã—Ö –∏–≥—Ä–∞—Ö ‚Äì –ø–æ–≤—Ç–æ—Ä—è–µ—à—å –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã.",
    "–¢—ã –ø—ã—Ç–∞–µ—à—å—Å—è –±—ã—Ç—å —É–º–Ω—ã–º, –Ω–æ —Ç–≤–æ–∏ –º–æ–∑–≥–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏.",
    "–ï—Å–ª–∏ –±—ã –±–æ–ª—Ç–æ–≤–Ω—è —Å–∂–∏–≥–∞–ª–∞ –∫–∞–ª–æ—Ä–∏–∏, —Ç—ã –±—ã–ª –±—ã –º–æ–¥–µ–ª—å—é.",
    "–¢—ã –∫–∞–∫ –∞–Ω—Ç–∏–≤–∏—Ä—É—Å 2005 –≥–æ–¥–∞ ‚Äì —Ç–æ—Ä–º–æ–∑–∏—à—å –∏ –±–µ—Å–ø–æ–ª–µ–∑–µ–Ω.",
    "–¢—ã –º–æ–≥ –±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –û–ª–∏–º–ø–∏–∞–¥–µ‚Ä¶ –ø–æ —Ñ–µ–π–ª–∞–º.",
    "–¢—ã –Ω–∞—Å—Ç–æ–ª—å–∫–æ —Å–∫—É—á–Ω—ã–π, —á—Ç–æ –¥–∞–∂–µ Google –Ω–µ —Ö–æ—á–µ—Ç —Ç–µ–±—è –∏—Å–∫–∞—Ç—å.",
    "–ï—Å–ª–∏ –±—ã –±—ã–ª —Ç—É—Ä–Ω–∏—Ä –ø–æ –æ—à–∏–±–∫–∞–º, —Ç—ã –±—ã –æ—à–∏–±—Å—è —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.",
    "–¢—ã –∫–∞–∫ –±–∞—Ç–∞—Ä–µ–π–∫–∞ –∏–∑ –¥–µ—à—ë–≤–æ–≥–æ —Ñ–æ–Ω–∞—Ä–∏–∫–∞ ‚Äì —Ä–∞–∑—Ä—è–∂–∞–µ—à—å—Å—è –≤ —Å–∞–º—ã–π –≤–∞–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç.",
    "–¢—ã –ø—Ä–æ–±–æ–≤–∞–ª –º–æ–ª—á–∞—Ç—å? –≠—Ç–æ —Ç–µ–±–µ –∏–¥—ë—Ç –±–æ–ª—å—à–µ, —á–µ–º –≥–æ–≤–æ—Ä–∏—Ç—å.",
    "–¢–≤–æ–∏ —à—É—Ç–∫–∏ —Ç–∞–∫–∏–µ —Å—Ç–∞—Ä—ã–µ, —á—Ç–æ –∏–º–∏ –º–æ–∂–Ω–æ –∏–∑–±–∏–≤–∞—Ç—å –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–≤.",
    "–¢—ã –∫–∞–∫ GPS –≤ –ø–ª–æ—Ö–æ–π –ø–æ–≥–æ–¥–µ ‚Äì —Ç—É–ø–∏—à—å –∏ –≤–µ–¥—ë—à—å –Ω–µ —Ç—É–¥–∞.",
    "–ï—Å–ª–∏ –±—ã —Ç—É–ø–æ—Å—Ç—å –ø—Ä–æ–¥–∞–≤–∞–ª–∏, —Ç—ã –±—ã–ª –±—ã –±–∏—Ç–∫–æ–∏–Ω–æ–º 2010 –≥–æ–¥–∞ ‚Äì —Ü–µ–Ω–Ω–æ—Å—Ç—å –Ω—É–ª–µ–≤–∞—è, –Ω–æ —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–µ–¥–∫–∏–π.",
    "–¢—ã –Ω–µ –∏–∑ —Ç–µ—Ö, –∫—Ç–æ —É—á–∏—Ç—Å—è –Ω–∞ –æ—à–∏–±–∫–∞—Ö. –¢—ã –ø—Ä–æ—Å—Ç–æ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—à—å –∏—Ö.",
    "–ï—Å–ª–∏ –±—ã –ª–µ–Ω—å –±—ã–ª–∞ —Å–ø–æ—Ä—Ç–æ–º, —Ç—ã –±—ã –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª ‚Äì –ø–æ—Ç–æ–º—É —á—Ç–æ –ª–µ–Ω—å.",
    "–¢—ã —Ç–∞–∫ —á–∞—Å—Ç–æ –æ—à–∏–±–∞–µ—à—å—Å—è, —á—Ç–æ —Ç–≤–æ—è –∂–∏–∑–Ω—å ‚Äì —ç—Ç–æ speedrun –ø–æ —Ñ–µ–π–ª–∞–º.",
    "–¢–µ–±–µ –ø–ª–∞—Ç—è—Ç –∑–∞ —Ç–æ, —á—Ç–æ–±—ã —Ç—ã –±—ã–ª —Ç–∞–∫–∏–º? –ü–æ—Ç–æ–º—É —á—Ç–æ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ —Ç—ã –ø—Ä–æ—Ñ–∏.",
    "–¢—ã –∫–∞–∫ —Å—Ç–∞—Ä—ã–π —Ç–µ–ª–µ–≤–∏–∑–æ—Ä ‚Äì –∫–∞—Ä—Ç–∏–Ω–∫–∞ —Å–ª–∞–±–∞—è, –∑–≤—É–∫ —Ä–∞–∑–¥—Ä–∞–∂–∞—é—â–∏–π, –Ω–æ –≤—ã–±—Ä–æ—Å–∏—Ç—å –∂–∞–ª–∫–æ.",
    "–¢—ã ‚Äî –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ, —á—Ç–æ –∑–∞–∫–æ–Ω—ã —Ñ–∏–∑–∏–∫–∏ –º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å, –≤–µ–¥—å —É —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∏—Ç—è–∂–µ–Ω–∏—è.",
  ];

  constructor(
    @inject(TYPES.MemberService) private readonly userService: MemberService,
    @inject(TYPES.TextService) private readonly text: TextService,
  ) {
    super();
    this.setupHandlers();
  }

  private async sleep(ms: number): Promise<void> {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }

  private setupHandlers(): void {
    this.command("banbs", this.handleBanbs.bind(this));
    this.command("summon_demons", this.handleSummonDemons.bind(this));
    this.command("fuck_music", this.handleFuckMusic.bind(this));
    this.command("die", this.handleDie.bind(this));
    this.command("roast", this.handleRoast.bind(this));
    this.command("rickroll", this.handleRickroll.bind(this));
    this.command("delete_account", this.handleDeleteAccount.bind(this));
    this.command("self_destruct", this.handleSelfDestruct.bind(this));
    this.command("ping_behruz", this.handlePingBehruz.bind(this));
    this.command("greet", this.handleGreet.bind(this));
    this.command("terebinder", this.handleTerebinder.bind(this));
  }

  private async handleGreet(ctx: CommandContext): Promise<void> {
    await ctx.reply(this.text.get("greetings"));
  }

  private async handleBanbs(ctx: CommandContext): Promise<void> {
    const commandArgs = ctx.message.text.split(" ");
    if (commandArgs.length < 2) {
      await ctx.reply("–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      return;
    }

    const target = commandArgs[1];
    await ctx.reply(`${target} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω. –ü—Ä–∏—á–∏–Ω–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.`);

    await this.sleep(5000);
    await ctx.reply("–õ–∞–¥–Ω–æ, —à—É—á—É. –£ –Ω–∞—Å —Ç—É—Ç –¥–µ–º–æ–∫—Ä–∞—Ç–∏—è. –ü–æ–∫–∞ —á—Ç–æ...");
  }

  private async handleSummonDemons(ctx: CommandContext): Promise<void> {
    await ctx.reply("üîÆ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∏—Ç—É–∞–ª –ø—Ä–∏–∑—ã–≤–∞...");
    await this.sleep(2000);
    await ctx.reply("üåë –¢—å–º–∞ —Å–≥—É—â–∞–µ—Ç—Å—è...");
    await this.sleep(3000);
    await ctx.reply("üïØÔ∏è –ö—Ç–æ-—Ç–æ –ø–æ—Å—Ç—É—á–∞–ª—Å—è –≤ –¥–≤–µ—Ä—å...");
    await this.sleep(4000);
    await ctx.reply(
      "üëÅÔ∏è –û–Ω –∑–¥–µ—Å—å. –û, –Ω–µ—Ç. –û–ù –°–ú–û–¢–†–ò–¢ –ù–ê –¢–ï–ë–Ø, @" + ctx.from.username,
    );
    await this.sleep(6000);
    await ctx.reply("–õ–∞–¥–Ω–æ, —à—É—á—É. –ò–ª–∏ –Ω–µ—Ç?");
  }

  private async handleFuckMusic(ctx: CommandContext): Promise<void> {
    await ctx.reply(this.text.get("fuckMusic"));
  }

  private async handleDie(ctx: CommandContext): Promise<void> {
    const currentYear = new Date().getFullYear();
    await ctx.reply(
      `${ctx.from.first_name} –±–æ–ª—å—à–µ –Ω–µ—Ç —Å –Ω–∞–º–∏... üòµ\n\nR.I.P. ${ctx.from.first_name}, ${currentYear}-${currentYear + 50} üïØÔ∏è`,
    );
  }

  private async handleRoast(ctx: CommandContext): Promise<void> {
    const mention = ctx.message.text.split(" ")[1] || "@–Ω–µ—É–¥–∞—á–Ω–∏–∫";
    const roast = this.roasts[Math.floor(Math.random() * this.roasts.length)];
    await ctx.reply(`${mention}, ${roast}`);
  }

  private async handleRickroll(ctx: CommandContext): Promise<void> {
    await ctx.reply(
      "–°—Ä–æ—á–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å! –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: https://www.youtube.com/watch?v=dQw4w9WgXcQ",
    );
  }

  private async handleDeleteAccount(ctx: CommandContext): Promise<void> {
    await ctx.reply(
      "‚ö†Ô∏è –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –£–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥... üò±",
    );

    for (let i = 10; i > 0; i--) {
      await this.sleep(1000);
      await ctx.reply(`${i}...`);
    }

    await ctx.reply("üíÄ –û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.");
  }

  private async handleSelfDestruct(ctx: CommandContext): Promise<void> {
    await ctx.reply("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! ‚ö†Ô∏è");

    for (let i = 5; i > 0; i--) {
      await this.sleep(1000);
      await ctx.reply(`${i}...`);
    }

    await ctx.reply("üí• –ë–£–ú! –ê—Ö –¥–∞, —ç—Ç–æ –∂–µ –ø—Ä–æ—Å—Ç–æ —á–∞—Ç. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ.");
  }

  private async handlePingBehruz(ctx: CommandContext): Promise<void> {
    for (let i = 0; i < 3; i++) {
      await ctx.reply("@BEHruzM_17");
    }
  }

  private async handleTerebinder(ctx: CommandContext): Promise<void> {
    await ctx.reply("üîÆ –¢–µ—Ä–µ–±–∏–Ω–¥–µ—Ä –ø—Ä–æ–±—É–∂–¥–∞–µ—Ç—Å—è...");

    // Create a typing effect for dramatic effect
    const message = "‚ö° –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ—é –∞—É—Ä—É... ‚ö°";
    let currentText = "";

    const sentMessage = await ctx.reply(currentText);

    // Simulate typing effect by updating the message character by character
    for (const char of message) {
      currentText += char;
      await ctx.telegram.editMessageText(
        ctx.chat.id,
        sentMessage.message_id,
        undefined,
        currentText,
      );
      await this.sleep(150); // Delay between characters
    }

    await this.sleep(1000);

    // Generate a "random" but deterministic fortune based on the user's username
    const username = ctx.from.username || ctx.from.first_name;
    const usernameSeed = [...username].reduce(
      (sum, char) => sum + char.charCodeAt(0),
      0,
    );

    // Define fortune components
    const timeFrames = [
      "–∑–∞–≤—Ç—Ä–∞",
      "—á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é",
      "–≤ —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ",
      "–∫–æ–≥–¥–∞ –ú–∞—Ä—Å –≤–æ–π–¥—ë—Ç –≤ —Å–æ–∑–≤–µ–∑–¥–∏–µ –†–∞–∫–∞",
    ];
    const events = [
      "—É–ø–∞–¥—ë—Ç –Ω–∞ –≥–æ–ª–æ–≤—É –º–µ—Ç–µ–æ—Ä–∏—Ç —Ä–∞–∑–º–µ—Ä–æ–º —Å —á–∏–∑–±—É—Ä–≥–µ—Ä",
      "–≤—Å—Ç—Ä–µ—Ç–∏—à—å —Å–≤–æ—é –∏–¥–µ–∞–ª—å–Ω—É—é –≤—Ç–æ—Ä—É—é –ø–æ–ª–æ–≤–∏–Ω–∫—É, –Ω–æ –Ω–µ —É–∑–Ω–∞–µ—à—å –µ—ë",
      "–Ω–∞–π–¥—ë—à—å –∫–ª–∞–¥, –Ω–æ –ø–æ—Ç—Ä–∞—Ç–∏—à—å –≤—Å—ë –Ω–∞ –Ω–æ—Å–∫–∏",
      "—Å—Ç–∞–Ω–µ—à—å –º–µ–º–æ–º –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ",
      "–ø—Ä–µ–≤—Ä–∞—Ç–∏—à—å—Å—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ –Ω–∞ 24 —á–∞—Å–∞",
      "–æ–±—Ä–µ—Ç—ë—à—å —Å—É–ø–µ—Ä—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å, –Ω–æ —Å–∞–º—É—é –±–µ—Å–ø–æ–ª–µ–∑–Ω—É—é",
      "—Å–ª—É—á–∞–π–Ω–æ –∏–∑–æ–±—Ä–µ—Ç—ë—à—å –Ω–æ–≤—ã–π —Ç–∞–Ω—Ü–µ–≤–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥",
    ];
    const advice = [
      "–Ω–µ –µ—à—å —Å–∏–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
      "–¥–µ—Ä–∂–∏—Å—å –ø–æ–¥–∞–ª—å—à–µ –æ—Ç –ª—é–¥–µ–π –≤ –∂—ë–ª—Ç—ã—Ö –∫–µ–ø–∫–∞—Ö",
      "–Ω–µ –ø—Ä–∏–Ω–∏–º–∞–π –≤–∞–∂–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –ø–æ —á–µ—Ç–≤–µ—Ä–≥–∞–º",
      "–ø–æ–π –≤ –¥—É—à–µ –≥—Ä–æ–º—á–µ –æ–±—ã—á–Ω–æ–≥–æ",
      "–Ω–æ—Å–∏ —Ä–∞–∑–Ω—ã–µ –Ω–æ—Å–∫–∏ –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è —É–¥–∞—á–∏",
      "–Ω–∞—á–Ω–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∫—Ä—ã—à–∫–∏ –æ—Ç –±—É—Ç—ã–ª–æ–∫",
    ];

    // Use the username seed to deterministically select components
    const timeIndex = usernameSeed % timeFrames.length;
    const eventIndex = Math.floor(usernameSeed / 3) % events.length;
    const adviceIndex = Math.floor(usernameSeed / 7) % advice.length;

    // Create fortune card with formatted text
    await ctx.reply(
      `üîÆ *–ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ï –¢–ï–†–ï–ë–ò–ù–î–ï–†–ê* üîÆ\n\n` +
        `üë§ *${username}*\n\n` +
        `‚è∞ ${timeFrames[timeIndex]} —Ç–µ–±–µ ${events[eventIndex]}.\n\n` +
        `üí° *–°–æ–≤–µ—Ç –¥–Ω—è:* ${advice[adviceIndex]}.\n\n` +
        `‚ö†Ô∏è –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–±—ã—á–∏: ${(usernameSeed % 100) + 1}%`,
      { parse_mode: "Markdown" },
    );

    // Calculate the user's "lucky numbers" based on their username
    const luckyNumbers = [];
    for (let i = 0; i < 3; i++) {
      luckyNumbers.push(((usernameSeed * (i + 1)) % 42) + 1);
    }

    await this.sleep(2000);

    // Send lucky numbers as a follow-up
    await ctx.reply(
      `üé≤ –¢–≤–æ–∏ —Å—á–∞—Å—Ç–ª–∏–≤—ã–µ —á–∏—Å–ª–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: ${luckyNumbers.join(", ")}.\n` +
        `üì± –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —Ç–æ –Ω–µ –∑–≤–æ–Ω–∏ –ø–æ –Ω–µ–º—É. –ù–∏–∫–æ–≥–¥–∞.`,
    );
  }
}
